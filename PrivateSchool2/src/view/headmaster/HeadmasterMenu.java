/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.headmaster;

import controller.DBAccess;
import dao.*;
import java.awt.Dimension;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JScrollBar;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import view.UserMenu;
import model.Utils;

/**
 *
 * @author Sakel
 */
public class HeadmasterMenu extends javax.swing.JPanel implements UserMenu {
    
    /**
     * DAOs
     */
    private CourseDao cd = null;
    private TrainerDao td = null;
    private StudentDao sd = null;
    private AssignmentDao ad = null;
    private ScheduleDao scd = null;
    
    /**
     * all the Courses in the database
     */
    private LinkedHashMap<Integer, model.Course> allCourses;
    
    /**
     * all the Trainers in the database
     */
    private LinkedHashMap<String, model.Trainer> allTrainers;
    
    /**
     * all the Students in the database
     */
    private LinkedHashMap<String, model.Student> allStudents;
    
    /**
     * all the Assignments in the database
     */
    private LinkedHashMap<Integer, model.Assignment> allAssignments;
    
    /**
     * Table that will hold all the courses as rows
     */
    private JTable headmasterCourseTabScrollTable;
    private DefaultTableModel headmasterCourseTabScrollTableModel;
    private JScrollBar headmasterCourseTabScrollTableBarV;
    
    /**
     * Table that will hold all the trainers as rows
     */
    private JTable headmasterTrainerTabScrollTable;
    private DefaultTableModel headmasterTrainerTabScrollTableModel;
    private JScrollBar headmasterTrainerTabScrollTableBarV;
    
    /**
     * Table that will hold all the students as rows
     */
    private JTable headmasterStudentTabScrollTable;
    private DefaultTableModel headmasterStudentTabScrollTableModel;
    private JScrollBar headmasterStudentTabScrollTableBarV;
    
    /**
     * Table that will hold all the assignments as rows
     */
    private JTable headmasterAssignmentTabScrollTable;
    private DefaultTableModel headmasterAssignmentTabScrollTableModel;
    private JScrollBar headmasterAssignmentTabScrollTableBarV;
            

    /**
     * Creates new form HeadmasterMenu
     */
    public HeadmasterMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headmasterTabs = new javax.swing.JTabbedPane();
        headmasterCourseTab = new javax.swing.JPanel();
        headmasterCourseTabScrollPane = new javax.swing.JScrollPane();
        headmasterCourseTabScrollNRLabel = new javax.swing.JLabel();
        headmasterCourseTabNew = new javax.swing.JPanel();
        headmasterCourseTabNewLabel = new javax.swing.JLabel();
        headmasterCourseTabNewTitleLabel = new javax.swing.JLabel();
        headmasterCourseTabNewTitleField = new javax.swing.JTextField();
        headmasterCourseTabNewStreamLabel = new javax.swing.JLabel();
        headmasterCourseTabNewStreamField = new javax.swing.JComboBox<>();
        headmasterCourseTabNewTypeLabel = new javax.swing.JLabel();
        headmasterCourseTabNewTypeField = new javax.swing.JComboBox<>();
        headmasterCourseTabNewSubmit = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        headmasterCourseTabEx = new javax.swing.JLayeredPane();
        headmasterCourseTabExPanel1 = new javax.swing.JPanel();
        headmasterCourseTabExUpdate = new javax.swing.JButton();
        headmasterCourseTabExDelete = new javax.swing.JButton();
        headmasterCourseTabExLabel = new javax.swing.JLabel();
        headmasterCourseTabExIDLabel = new javax.swing.JLabel();
        headmasterCourseTabExTitleField = new javax.swing.JTextField();
        headmasterCourseTabExTitleLabel = new javax.swing.JLabel();
        headmasterCourseTabExStreamLabel = new javax.swing.JLabel();
        headmasterCourseTabExStreamField = new javax.swing.JComboBox<>();
        headmasterCourseTabExTypeField = new javax.swing.JComboBox<>();
        headmasterCourseTabExTypeLabel = new javax.swing.JLabel();
        headmasterCourseTabExStudentsAvScroll = new javax.swing.JScrollPane();
        headmasterCourseTabExStudentsAvList = new javax.swing.JList<>();
        headmasterCourseTabExStudentsJoinedScroll = new javax.swing.JScrollPane();
        headmasterCourseTabExStudentsJoinedList = new javax.swing.JList<>();
        headmasterCourseTabExStudentsLabel = new javax.swing.JLabel();
        headmasterCourseTabExStudentsAvAdd = new javax.swing.JButton();
        headmasterCourseTabExStudentsJoinedRemove = new javax.swing.JButton();
        headmasterCourseTabExTrainersJoinedScroll = new javax.swing.JScrollPane();
        headmasterCourseTabExTrainersJoinedList = new javax.swing.JList<>();
        headmasterCourseTabExTrainersLabel = new javax.swing.JLabel();
        headmasterCourseTabExTrainersAvAdd = new javax.swing.JButton();
        headmasterCourseTabExTrainersAvScroll = new javax.swing.JScrollPane();
        headmasterCourseTabExTrainersAvList = new javax.swing.JList<>();
        headmasterCourseTabExTrainersJoinedRemove = new javax.swing.JButton();
        headmasterCourseTabExAssignmentsJoinedScroll = new javax.swing.JScrollPane();
        headmasterCourseTabExAssignmentsJoinedList = new javax.swing.JList<>();
        headmasterCourseTabExAssignmentsLabel = new javax.swing.JLabel();
        headmasterCourseTabExSchedulesPanel = new javax.swing.JPanel();
        headmasterCourseTabExSchedulesStart = new com.github.lgooddatepicker.components.DateTimePicker();
        headmasterCourseTabExSchedulesEnd = new com.github.lgooddatepicker.components.DateTimePicker();
        headmasterCourseTabExSchedulesJoinedRemove = new javax.swing.JButton();
        headmasterCourseTabExSchedulesNewAdd = new javax.swing.JButton();
        headmasterCourseTabExSchedulesLabel = new javax.swing.JLabel();
        headmasterCourseTabExSchedulesLabelStart = new javax.swing.JLabel();
        headmasterCourseTabExSchedulesLabelEnd = new javax.swing.JLabel();
        headmasterCourseTabExSchedulesJoinedScroll = new javax.swing.JScrollPane();
        headmasterCourseTabExSchedulesJoinedList = new javax.swing.JList<>();
        headmasterCourseTabExPanel2 = new javax.swing.JPanel();
        headmasterTrainerTab = new javax.swing.JPanel();
        headmasterTrainerTabScrollPane = new javax.swing.JScrollPane();
        headmasterTrainerTabScrollNRLabel = new javax.swing.JLabel();
        headmasterTrainerTabNew = new javax.swing.JPanel();
        headmasterTrainerTabNewLabel = new javax.swing.JLabel();
        headmasterTrainerTabNewFNLabel = new javax.swing.JLabel();
        headmasterTrainerTabNewFNField = new javax.swing.JTextField();
        headmasterTrainerTabNewLNLabel = new javax.swing.JLabel();
        headmasterTrainerTabNewLNField = new javax.swing.JTextField();
        headmasterTrainerTabNewUNLabel = new javax.swing.JLabel();
        headmasterTrainerTabNewUNField = new javax.swing.JTextField();
        headmasterTrainerTabNewPWLabel = new javax.swing.JLabel();
        headmasterTrainerTabNewPWField = new javax.swing.JPasswordField();
        headmasterTrainerTabNewSubmit = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        headmasterTrainerTabEx = new javax.swing.JLayeredPane();
        headmasterTrainerTabExPanel1 = new javax.swing.JPanel();
        headmasterTrainerTabExUpdate = new javax.swing.JButton();
        headmasterTrainerTabExDelete = new javax.swing.JButton();
        headmasterTrainerTabExLabel = new javax.swing.JLabel();
        headmasterTrainerTabExIDLabel = new javax.swing.JLabel();
        headmasterTrainerTabExFNLabel = new javax.swing.JLabel();
        headmasterTrainerTabExFNField = new javax.swing.JTextField();
        headmasterTrainerTabExLNLabel = new javax.swing.JLabel();
        headmasterTrainerTabExLNField = new javax.swing.JTextField();
        headmasterTrainerTabExUNLabel = new javax.swing.JLabel();
        headmasterTrainerTabExUNField = new javax.swing.JTextField();
        headmasterTrainerTabExPWLabel = new javax.swing.JLabel();
        headmasterTrainerTabExPWField = new javax.swing.JPasswordField();
        headmasterTrainerTabExPanel2 = new javax.swing.JPanel();
        headmasterStudentTab = new javax.swing.JPanel();
        headmasterStudentTabScrollPane = new javax.swing.JScrollPane();
        headmasterStudentTabScrollNRLabel = new javax.swing.JLabel();
        headmasterStudentTabNew = new javax.swing.JPanel();
        headmasterStudentTabNewLabel = new javax.swing.JLabel();
        headmasterStudentTabNewFNLabel = new javax.swing.JLabel();
        headmasterStudentTabNewFNField = new javax.swing.JTextField();
        headmasterStudentTabNewLNLabel = new javax.swing.JLabel();
        headmasterStudentTabNewLNField = new javax.swing.JTextField();
        headmasterStudentTabNewUNLabel = new javax.swing.JLabel();
        headmasterStudentTabNewUNField = new javax.swing.JTextField();
        headmasterStudentTabNewPWLabel = new javax.swing.JLabel();
        headmasterStudentTabNewPWField = new javax.swing.JPasswordField();
        headmasterStudentTabNewBDLabel = new javax.swing.JLabel();
        headmasterStudentTabNewBDField = new com.github.lgooddatepicker.components.DatePicker();
        headmasterStudentTabNewTFLabel = new javax.swing.JLabel();
        headmasterStudentTabNewTFField = new javax.swing.JTextField();
        headmasterStudentTabNewSubmit = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        headmasterStudentTabEx = new javax.swing.JLayeredPane();
        headmasterStudentTabExPanel1 = new javax.swing.JPanel();
        headmasterStudentTabExUpdate = new javax.swing.JButton();
        headmasterStudentTabExDelete = new javax.swing.JButton();
        headmasterStudentTabExLabel = new javax.swing.JLabel();
        headmasterStudentTabExIDLabel = new javax.swing.JLabel();
        headmasterStudentTabExFNLabel = new javax.swing.JLabel();
        headmasterStudentTabExFNField = new javax.swing.JTextField();
        headmasterStudentTabExLNLabel = new javax.swing.JLabel();
        headmasterStudentTabExLNField = new javax.swing.JTextField();
        headmasterStudentTabExUNLabel = new javax.swing.JLabel();
        headmasterStudentTabExUNField = new javax.swing.JTextField();
        headmasterStudentTabExPWLabel = new javax.swing.JLabel();
        headmasterStudentTabExPWField = new javax.swing.JPasswordField();
        headmasterStudentTabExBDLabel = new javax.swing.JLabel();
        headmasterStudentTabExBDField = new com.github.lgooddatepicker.components.DatePicker();
        headmasterStudentTabExTFLabel = new javax.swing.JLabel();
        headmasterStudentTabExTFField = new javax.swing.JTextField();
        headmasterStudentTabExPanel2 = new javax.swing.JPanel();
        headmasterAssignmentTab = new javax.swing.JPanel();
        headmasterAssignmentTabScrollPane = new javax.swing.JScrollPane();
        headmasterAssignmentTabScrollNRLabel = new javax.swing.JLabel();
        headmasterAssignmentTabNew = new javax.swing.JPanel();
        headmasterAssignmentTabNewLabel = new javax.swing.JLabel();
        headmasterAssignmentTabNewCILabel = new javax.swing.JLabel();
        headmasterAssignmentTabNewCIField = new javax.swing.JComboBox<>();
        headmasterAssignmentTabNewTitleLabel = new javax.swing.JLabel();
        headmasterAssignmentTabNewTitleField = new javax.swing.JTextField();
        headmasterAssignmentTabNewSDLabel = new javax.swing.JLabel();
        headmasterAssignmentTabNewSDField = new com.github.lgooddatepicker.components.DatePicker();
        headmasterAssignmentTabNewSubmit = new javax.swing.JButton();
        headmasterAssignmentTabNewDescLabel = new javax.swing.JLabel();
        headmasterAssignmentTabNewDescScrollPane = new javax.swing.JScrollPane();
        headmasterAssignmentTabNewDescField = new javax.swing.JTextArea();
        jSeparator4 = new javax.swing.JSeparator();
        headmasterAssignmentTabEx = new javax.swing.JLayeredPane();
        headmasterAssignmentTabExPanel1 = new javax.swing.JPanel();
        headmasterAssignmentTabExUpdate = new javax.swing.JButton();
        headmasterAssignmentTabExDelete = new javax.swing.JButton();
        headmasterAssignmentTabExLabel = new javax.swing.JLabel();
        headmasterAssignmentTabExIDLabel = new javax.swing.JLabel();
        headmasterAssignmentTabExCILabel = new javax.swing.JLabel();
        headmasterAssignmentTabExCIField = new javax.swing.JComboBox<>();
        headmasterAssignmentTabExTitleLabel = new javax.swing.JLabel();
        headmasterAssignmentTabExTitleField = new javax.swing.JTextField();
        headmasterAssignmentTabExSDLabel = new javax.swing.JLabel();
        headmasterAssignmentTabExSDField = new com.github.lgooddatepicker.components.DatePicker();
        headmasterAssignmentTabExDescLabel = new javax.swing.JLabel();
        headmasterAssignmentTabExDescScrollPane = new javax.swing.JScrollPane();
        headmasterAssignmentTabExDescField = new javax.swing.JTextArea();
        headmasterAssignmentTabExPanel2 = new javax.swing.JPanel();

        headmasterTabs.setName(""); // NOI18N

        headmasterCourseTabScrollNRLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headmasterCourseTabScrollNRLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headmasterCourseTabScrollNRLabel.setText("No courses found. Add some");
        headmasterCourseTabScrollPane.setViewportView(headmasterCourseTabScrollNRLabel);

        headmasterCourseTabNew.setForeground(new java.awt.Color(153, 153, 153));

        headmasterCourseTabNewLabel.setText("New Course");
        headmasterCourseTabNewLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        headmasterCourseTabNewTitleLabel.setText("Title :");

        headmasterCourseTabNewStreamLabel.setText("Stream :");

        headmasterCourseTabNewStreamField.setModel(new DefaultComboBoxModel(model.Utils.CourseStream.toStringArray()));

        headmasterCourseTabNewTypeLabel.setText("Type :");

        headmasterCourseTabNewTypeField.setModel(new DefaultComboBoxModel(model.Utils.CourseType.toStringArray()));

        headmasterCourseTabNewSubmit.setText("Create");
        headmasterCourseTabNewSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabNewSubmitActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        headmasterCourseTabExPanel1.setOpaque(false);

        headmasterCourseTabExUpdate.setText("Update");
        headmasterCourseTabExUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabExUpdateActionPerformed(evt);
            }
        });

        headmasterCourseTabExDelete.setText("Delete");
        headmasterCourseTabExDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabExDeleteActionPerformed(evt);
            }
        });

        headmasterCourseTabExLabel.setText("Course id :");
        headmasterCourseTabExLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        headmasterCourseTabExIDLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headmasterCourseTabExIDLabel.setForeground(new java.awt.Color(255, 0, 51));

        headmasterCourseTabExTitleLabel.setText("Title :");

        headmasterCourseTabExStreamLabel.setText("Stream :");

        headmasterCourseTabExStreamField.setModel(new DefaultComboBoxModel(model.Utils.CourseStream.toStringArray()));

        headmasterCourseTabExTypeField.setModel(new DefaultComboBoxModel(model.Utils.CourseType.toStringArray()));

        headmasterCourseTabExTypeLabel.setText("Type :");

        headmasterCourseTabExStudentsAvList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        headmasterCourseTabExStudentsAvScroll.setViewportView(headmasterCourseTabExStudentsAvList);

        headmasterCourseTabExStudentsJoinedList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        headmasterCourseTabExStudentsJoinedScroll.setViewportView(headmasterCourseTabExStudentsJoinedList);

        headmasterCourseTabExStudentsLabel.setText("Students");

        headmasterCourseTabExStudentsAvAdd.setText("add >");
        headmasterCourseTabExStudentsAvAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabExStudentsAvAddActionPerformed(evt);
            }
        });

        headmasterCourseTabExStudentsJoinedRemove.setText("< remove");
        headmasterCourseTabExStudentsJoinedRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabExStudentsJoinedRemoveActionPerformed(evt);
            }
        });

        headmasterCourseTabExTrainersJoinedList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        headmasterCourseTabExTrainersJoinedScroll.setViewportView(headmasterCourseTabExTrainersJoinedList);

        headmasterCourseTabExTrainersLabel.setText("Trainers");

        headmasterCourseTabExTrainersAvAdd.setText("add >");
        headmasterCourseTabExTrainersAvAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabExTrainersAvAddActionPerformed(evt);
            }
        });

        headmasterCourseTabExTrainersAvList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        headmasterCourseTabExTrainersAvScroll.setViewportView(headmasterCourseTabExTrainersAvList);

        headmasterCourseTabExTrainersJoinedRemove.setText("< remove");
        headmasterCourseTabExTrainersJoinedRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabExTrainersJoinedRemoveActionPerformed(evt);
            }
        });

        headmasterCourseTabExAssignmentsJoinedList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        headmasterCourseTabExAssignmentsJoinedScroll.setViewportView(headmasterCourseTabExAssignmentsJoinedList);

        headmasterCourseTabExAssignmentsLabel.setText("Assignments");

        headmasterCourseTabExSchedulesJoinedRemove.setText("< remove");
        headmasterCourseTabExSchedulesJoinedRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabExSchedulesJoinedRemoveActionPerformed(evt);
            }
        });

        headmasterCourseTabExSchedulesNewAdd.setText("add >");
        headmasterCourseTabExSchedulesNewAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterCourseTabExSchedulesNewAddActionPerformed(evt);
            }
        });

        headmasterCourseTabExSchedulesLabel.setText("Schedule");

        headmasterCourseTabExSchedulesLabelStart.setText("start");

        headmasterCourseTabExSchedulesLabelEnd.setText("end");

        headmasterCourseTabExSchedulesJoinedList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        headmasterCourseTabExSchedulesJoinedScroll.setViewportView(headmasterCourseTabExSchedulesJoinedList);

        javax.swing.GroupLayout headmasterCourseTabExSchedulesPanelLayout = new javax.swing.GroupLayout(headmasterCourseTabExSchedulesPanel);
        headmasterCourseTabExSchedulesPanel.setLayout(headmasterCourseTabExSchedulesPanelLayout);
        headmasterCourseTabExSchedulesPanelLayout.setHorizontalGroup(
            headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterCourseTabExSchedulesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headmasterCourseTabExSchedulesLabelStart, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterCourseTabExSchedulesLabelEnd, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(headmasterCourseTabExSchedulesEnd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(headmasterCourseTabExSchedulesStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(headmasterCourseTabExSchedulesNewAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(headmasterCourseTabExSchedulesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(headmasterCourseTabExSchedulesJoinedRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterCourseTabExSchedulesJoinedScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headmasterCourseTabExSchedulesPanelLayout.setVerticalGroup(
            headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headmasterCourseTabExSchedulesPanelLayout.createSequentialGroup()
                .addGroup(headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterCourseTabExSchedulesPanelLayout.createSequentialGroup()
                        .addComponent(headmasterCourseTabExSchedulesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterCourseTabExSchedulesStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterCourseTabExSchedulesLabelStart))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterCourseTabExSchedulesEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterCourseTabExSchedulesLabelEnd)))
                    .addGroup(headmasterCourseTabExSchedulesPanelLayout.createSequentialGroup()
                        .addGap(0, 11, Short.MAX_VALUE)
                        .addComponent(headmasterCourseTabExSchedulesJoinedScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(headmasterCourseTabExSchedulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headmasterCourseTabExSchedulesJoinedRemove)
                    .addComponent(headmasterCourseTabExSchedulesNewAdd)))
        );

        javax.swing.GroupLayout headmasterCourseTabExPanel1Layout = new javax.swing.GroupLayout(headmasterCourseTabExPanel1);
        headmasterCourseTabExPanel1.setLayout(headmasterCourseTabExPanel1Layout);
        headmasterCourseTabExPanel1Layout.setHorizontalGroup(
            headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headmasterCourseTabExAssignmentsLabel)
                    .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(headmasterCourseTabExStreamLabel)
                                    .addComponent(headmasterCourseTabExTypeLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(headmasterCourseTabExTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(headmasterCourseTabExStreamField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                                .addComponent(headmasterCourseTabExTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(headmasterCourseTabExTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(headmasterCourseTabExDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(headmasterCourseTabExUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(headmasterCourseTabExLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addComponent(headmasterCourseTabExIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(69, 69, 69)
                        .addComponent(headmasterCourseTabExSchedulesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(headmasterCourseTabExTrainersAvScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(headmasterCourseTabExTrainersAvAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(headmasterCourseTabExTrainersJoinedRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(headmasterCourseTabExTrainersJoinedScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(headmasterCourseTabExTrainersLabel))
                        .addGap(27, 27, 27)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(headmasterCourseTabExStudentsLabel)
                            .addComponent(headmasterCourseTabExStudentsAvScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(headmasterCourseTabExStudentsAvAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(headmasterCourseTabExStudentsJoinedScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(headmasterCourseTabExStudentsJoinedRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(headmasterCourseTabExAssignmentsJoinedScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        headmasterCourseTabExPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterCourseTabExAssignmentsJoinedScroll, headmasterCourseTabExStudentsAvScroll, headmasterCourseTabExStudentsJoinedScroll, headmasterCourseTabExTrainersAvScroll, headmasterCourseTabExTrainersJoinedScroll});

        headmasterCourseTabExPanel1Layout.setVerticalGroup(
            headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(headmasterCourseTabExLabel)
                            .addComponent(headmasterCourseTabExUpdate))
                        .addGap(4, 4, 4)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(headmasterCourseTabExDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(headmasterCourseTabExIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(headmasterCourseTabExTitleField)
                            .addComponent(headmasterCourseTabExTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterCourseTabExStreamLabel)
                            .addComponent(headmasterCourseTabExStreamField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterCourseTabExTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterCourseTabExTypeLabel)))
                    .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(headmasterCourseTabExSchedulesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(headmasterCourseTabExStudentsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterCourseTabExStudentsAvScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(headmasterCourseTabExStudentsJoinedScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterCourseTabExStudentsAvAdd)
                            .addComponent(headmasterCourseTabExStudentsJoinedRemove)))
                    .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(headmasterCourseTabExTrainersLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(headmasterCourseTabExPanel1Layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(headmasterCourseTabExTrainersJoinedRemove))
                            .addGroup(headmasterCourseTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(headmasterCourseTabExTrainersJoinedScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headmasterCourseTabExPanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(headmasterCourseTabExTrainersAvScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(headmasterCourseTabExTrainersAvAdd))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headmasterCourseTabExAssignmentsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(headmasterCourseTabExAssignmentsJoinedScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addGap(72, 72, 72))
        );

        headmasterCourseTabExPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterCourseTabExLabel, headmasterCourseTabExUpdate});

        headmasterCourseTabExPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterCourseTabExTrainersAvAdd, headmasterCourseTabExTrainersJoinedRemove});

        headmasterCourseTabExPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterCourseTabExAssignmentsJoinedScroll, headmasterCourseTabExStudentsAvScroll, headmasterCourseTabExStudentsJoinedScroll, headmasterCourseTabExTrainersAvScroll, headmasterCourseTabExTrainersJoinedScroll});

        javax.swing.GroupLayout headmasterCourseTabExPanel2Layout = new javax.swing.GroupLayout(headmasterCourseTabExPanel2);
        headmasterCourseTabExPanel2.setLayout(headmasterCourseTabExPanel2Layout);
        headmasterCourseTabExPanel2Layout.setHorizontalGroup(
            headmasterCourseTabExPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 973, Short.MAX_VALUE)
        );
        headmasterCourseTabExPanel2Layout.setVerticalGroup(
            headmasterCourseTabExPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 475, Short.MAX_VALUE)
        );

        headmasterCourseTabEx.setLayer(headmasterCourseTabExPanel1, 1);
        headmasterCourseTabEx.setLayer(headmasterCourseTabExPanel2, 2);

        javax.swing.GroupLayout headmasterCourseTabExLayout = new javax.swing.GroupLayout(headmasterCourseTabEx);
        headmasterCourseTabEx.setLayout(headmasterCourseTabExLayout);
        headmasterCourseTabExLayout.setHorizontalGroup(
            headmasterCourseTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headmasterCourseTabExPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headmasterCourseTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(headmasterCourseTabExPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headmasterCourseTabExLayout.setVerticalGroup(
            headmasterCourseTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headmasterCourseTabExPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headmasterCourseTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(headmasterCourseTabExPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout headmasterCourseTabNewLayout = new javax.swing.GroupLayout(headmasterCourseTabNew);
        headmasterCourseTabNew.setLayout(headmasterCourseTabNewLayout);
        headmasterCourseTabNewLayout.setHorizontalGroup(
            headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterCourseTabNewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterCourseTabNewLayout.createSequentialGroup()
                        .addGroup(headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(headmasterCourseTabNewStreamLabel)
                            .addComponent(headmasterCourseTabNewTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterCourseTabNewStreamField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterCourseTabNewTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(headmasterCourseTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterCourseTabNewSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(headmasterCourseTabNewLabel))
                    .addGroup(headmasterCourseTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterCourseTabNewTypeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headmasterCourseTabNewTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(headmasterCourseTabEx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        headmasterCourseTabNewLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterCourseTabNewStreamLabel, headmasterCourseTabNewTitleLabel, headmasterCourseTabNewTypeLabel});

        headmasterCourseTabNewLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterCourseTabNewStreamField, headmasterCourseTabNewTypeField});

        headmasterCourseTabNewLayout.setVerticalGroup(
            headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterCourseTabNewLayout.createSequentialGroup()
                .addGroup(headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterCourseTabNewLabel)
                    .addComponent(headmasterCourseTabNewSubmit))
                .addGap(18, 18, 18)
                .addGroup(headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(headmasterCourseTabNewTitleField)
                    .addComponent(headmasterCourseTabNewTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterCourseTabNewStreamLabel)
                    .addComponent(headmasterCourseTabNewStreamField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterCourseTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterCourseTabNewTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterCourseTabNewTypeLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(headmasterCourseTabEx, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        headmasterCourseTabNewLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterCourseTabNewStreamField, headmasterCourseTabNewStreamLabel, headmasterCourseTabNewTitleField, headmasterCourseTabNewTitleLabel, headmasterCourseTabNewTypeField, headmasterCourseTabNewTypeLabel});

        javax.swing.GroupLayout headmasterCourseTabLayout = new javax.swing.GroupLayout(headmasterCourseTab);
        headmasterCourseTab.setLayout(headmasterCourseTabLayout);
        headmasterCourseTabLayout.setHorizontalGroup(
            headmasterCourseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headmasterCourseTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headmasterCourseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterCourseTabNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterCourseTabScrollPane))
                .addContainerGap())
        );
        headmasterCourseTabLayout.setVerticalGroup(
            headmasterCourseTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterCourseTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headmasterCourseTabScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(headmasterCourseTabNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        headmasterTabs.addTab("Courses", null, headmasterCourseTab, "<html>CRUD on Courses<br>List of existing courses along with edit buttons + a new course button</html>");

        headmasterTrainerTabScrollNRLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headmasterTrainerTabScrollNRLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headmasterTrainerTabScrollNRLabel.setText("No trainers found. Add some");
        headmasterTrainerTabScrollPane.setViewportView(headmasterTrainerTabScrollNRLabel);

        headmasterTrainerTabNewLabel.setText("New Trainer");
        headmasterTrainerTabNewLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        headmasterTrainerTabNewFNLabel.setText("First Name :");

        headmasterTrainerTabNewLNLabel.setText("Last Name :");

        headmasterTrainerTabNewUNLabel.setText("Username :");

        headmasterTrainerTabNewPWLabel.setText("Password :");

        headmasterTrainerTabNewSubmit.setText("Add");
        headmasterTrainerTabNewSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterTrainerTabNewSubmitActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));

        headmasterTrainerTabExPanel1.setOpaque(false);

        headmasterTrainerTabExUpdate.setText("Update");
        headmasterTrainerTabExUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterTrainerTabExUpdateActionPerformed(evt);
            }
        });

        headmasterTrainerTabExDelete.setText("Delete");
        headmasterTrainerTabExDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterTrainerTabExDeleteActionPerformed(evt);
            }
        });

        headmasterTrainerTabExLabel.setText("Trainer id :");
        headmasterTrainerTabExLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        headmasterTrainerTabExIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headmasterTrainerTabExIDLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headmasterTrainerTabExIDLabel.setForeground(new java.awt.Color(255, 0, 0));

        headmasterTrainerTabExFNLabel.setText("First Name :");

        headmasterTrainerTabExLNLabel.setText("Last Name :");

        headmasterTrainerTabExUNLabel.setText("Username :");

        headmasterTrainerTabExPWLabel.setText("Password :");

        javax.swing.GroupLayout headmasterTrainerTabExPanel1Layout = new javax.swing.GroupLayout(headmasterTrainerTabExPanel1);
        headmasterTrainerTabExPanel1.setLayout(headmasterTrainerTabExPanel1Layout);
        headmasterTrainerTabExPanel1Layout.setHorizontalGroup(
            headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterTrainerTabExPanel1Layout.createSequentialGroup()
                .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(headmasterTrainerTabExDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterTrainerTabExPWLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterTrainerTabExUNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterTrainerTabExLNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterTrainerTabExUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(headmasterTrainerTabExFNLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(headmasterTrainerTabExUNField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                        .addComponent(headmasterTrainerTabExFNField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(headmasterTrainerTabExLNField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(headmasterTrainerTabExPWField))
                    .addComponent(headmasterTrainerTabExLabel)
                    .addComponent(headmasterTrainerTabExIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 737, Short.MAX_VALUE))
        );
        headmasterTrainerTabExPanel1Layout.setVerticalGroup(
            headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterTrainerTabExPanel1Layout.createSequentialGroup()
                .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterTrainerTabExUpdate)
                    .addComponent(headmasterTrainerTabExLabel))
                .addGap(8, 8, 8)
                .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(headmasterTrainerTabExDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterTrainerTabExIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterTrainerTabExFNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterTrainerTabExFNField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterTrainerTabExLNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterTrainerTabExLNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterTrainerTabExUNLabel)
                    .addComponent(headmasterTrainerTabExUNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterTrainerTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterTrainerTabExPWLabel)
                    .addComponent(headmasterTrainerTabExPWField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(131, 131, 131))
        );

        javax.swing.GroupLayout headmasterTrainerTabExPanel2Layout = new javax.swing.GroupLayout(headmasterTrainerTabExPanel2);
        headmasterTrainerTabExPanel2.setLayout(headmasterTrainerTabExPanel2Layout);
        headmasterTrainerTabExPanel2Layout.setHorizontalGroup(
            headmasterTrainerTabExPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1011, Short.MAX_VALUE)
        );
        headmasterTrainerTabExPanel2Layout.setVerticalGroup(
            headmasterTrainerTabExPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        headmasterTrainerTabEx.setLayer(headmasterTrainerTabExPanel1, 1);
        headmasterTrainerTabEx.setLayer(headmasterTrainerTabExPanel2, 2);

        javax.swing.GroupLayout headmasterTrainerTabExLayout = new javax.swing.GroupLayout(headmasterTrainerTabEx);
        headmasterTrainerTabEx.setLayout(headmasterTrainerTabExLayout);
        headmasterTrainerTabExLayout.setHorizontalGroup(
            headmasterTrainerTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headmasterTrainerTabExPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headmasterTrainerTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(headmasterTrainerTabExPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headmasterTrainerTabExLayout.setVerticalGroup(
            headmasterTrainerTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headmasterTrainerTabExPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headmasterTrainerTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(headmasterTrainerTabExPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout headmasterTrainerTabNewLayout = new javax.swing.GroupLayout(headmasterTrainerTabNew);
        headmasterTrainerTabNew.setLayout(headmasterTrainerTabNewLayout);
        headmasterTrainerTabNewLayout.setHorizontalGroup(
            headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterTrainerTabNewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterTrainerTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterTrainerTabNewLNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(headmasterTrainerTabNewLNField, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
                    .addGroup(headmasterTrainerTabNewLayout.createSequentialGroup()
                        .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterTrainerTabNewFNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(headmasterTrainerTabNewSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterTrainerTabNewFNField, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                            .addComponent(headmasterTrainerTabNewLabel)))
                    .addGroup(headmasterTrainerTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterTrainerTabNewPWLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(headmasterTrainerTabNewPWField))
                    .addGroup(headmasterTrainerTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterTrainerTabNewUNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(headmasterTrainerTabNewUNField)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(headmasterTrainerTabEx)
                .addContainerGap())
        );

        headmasterTrainerTabNewLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterTrainerTabNewFNField, headmasterTrainerTabNewLNField, headmasterTrainerTabNewPWField, headmasterTrainerTabNewUNField});

        headmasterTrainerTabNewLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterTrainerTabNewFNLabel, headmasterTrainerTabNewLNLabel, headmasterTrainerTabNewPWLabel, headmasterTrainerTabNewUNLabel});

        headmasterTrainerTabNewLayout.setVerticalGroup(
            headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterTrainerTabNewLayout.createSequentialGroup()
                .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterTrainerTabNewLayout.createSequentialGroup()
                        .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(headmasterTrainerTabNewSubmit)
                            .addComponent(headmasterTrainerTabNewLabel))
                        .addGap(16, 16, 16)
                        .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(headmasterTrainerTabNewFNField)
                            .addComponent(headmasterTrainerTabNewFNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterTrainerTabNewLNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterTrainerTabNewLNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterTrainerTabNewUNLabel)
                            .addComponent(headmasterTrainerTabNewUNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterTrainerTabNewPWLabel)
                            .addComponent(headmasterTrainerTabNewPWField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(headmasterTrainerTabNewLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(headmasterTrainerTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(headmasterTrainerTabEx))))
                .addContainerGap())
        );

        headmasterTrainerTabNewLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterTrainerTabNewFNLabel, headmasterTrainerTabNewLNLabel, headmasterTrainerTabNewPWLabel, headmasterTrainerTabNewUNLabel});

        headmasterTrainerTabNewLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterTrainerTabNewFNField, headmasterTrainerTabNewLNField, headmasterTrainerTabNewPWField, headmasterTrainerTabNewUNField});

        javax.swing.GroupLayout headmasterTrainerTabLayout = new javax.swing.GroupLayout(headmasterTrainerTab);
        headmasterTrainerTab.setLayout(headmasterTrainerTabLayout);
        headmasterTrainerTabLayout.setHorizontalGroup(
            headmasterTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headmasterTrainerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headmasterTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterTrainerTabNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterTrainerTabScrollPane))
                .addContainerGap())
        );
        headmasterTrainerTabLayout.setVerticalGroup(
            headmasterTrainerTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterTrainerTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headmasterTrainerTabScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(headmasterTrainerTabNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        headmasterTabs.addTab("Trainers", null, headmasterTrainerTab, "<html>CRUD on trainers<br>List of trainers with edit buttons + new Trainer button</html>");

        headmasterStudentTabScrollNRLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headmasterStudentTabScrollNRLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headmasterStudentTabScrollNRLabel.setText("No students found. Add some");
        headmasterStudentTabScrollPane.setViewportView(headmasterStudentTabScrollNRLabel);

        headmasterStudentTabNewLabel.setText("New Student");
        headmasterStudentTabNewLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        headmasterStudentTabNewFNLabel.setText("First Name :");

        headmasterStudentTabNewLNLabel.setText("Last Name :");

        headmasterStudentTabNewUNLabel.setText("Username :");

        headmasterStudentTabNewPWLabel.setText("Password :");

        headmasterStudentTabNewBDLabel.setText("Birth Date :");

        headmasterStudentTabNewTFLabel.setText("Tuition Fees :");

        headmasterStudentTabNewSubmit.setText("Add");
        headmasterStudentTabNewSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterStudentTabNewSubmitActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));

        headmasterStudentTabExPanel1.setOpaque(false);

        headmasterStudentTabExUpdate.setText("Update");
        headmasterStudentTabExUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterStudentTabExUpdateActionPerformed(evt);
            }
        });

        headmasterStudentTabExDelete.setText("Delete");
        headmasterStudentTabExDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterStudentTabExDeleteActionPerformed(evt);
            }
        });

        headmasterStudentTabExLabel.setText("Student id :");
        headmasterStudentTabExLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        headmasterStudentTabExIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headmasterStudentTabExIDLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headmasterStudentTabExIDLabel.setForeground(new java.awt.Color(255, 0, 0));

        headmasterStudentTabExFNLabel.setText("First Name :");

        headmasterStudentTabExLNLabel.setText("Last Name :");

        headmasterStudentTabExUNLabel.setText("Username :");

        headmasterStudentTabExPWLabel.setText("Password :");

        headmasterStudentTabExBDLabel.setText("Birth Date :");

        headmasterStudentTabExTFLabel.setText("Tuition Fees :");

        javax.swing.GroupLayout headmasterStudentTabExPanel1Layout = new javax.swing.GroupLayout(headmasterStudentTabExPanel1);
        headmasterStudentTabExPanel1.setLayout(headmasterStudentTabExPanel1Layout);
        headmasterStudentTabExPanel1Layout.setHorizontalGroup(
            headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterStudentTabExPanel1Layout.createSequentialGroup()
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterStudentTabExPanel1Layout.createSequentialGroup()
                        .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterStudentTabExBDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(headmasterStudentTabExFNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(headmasterStudentTabExPWLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(headmasterStudentTabExUNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(headmasterStudentTabExLNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(headmasterStudentTabExTFLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(headmasterStudentTabExLNField)
                            .addComponent(headmasterStudentTabExUNField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterStudentTabExPWField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterStudentTabExTFField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterStudentTabExBDField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(headmasterStudentTabExFNField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(headmasterStudentTabExPanel1Layout.createSequentialGroup()
                        .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(headmasterStudentTabExDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(headmasterStudentTabExUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                        .addGap(25, 25, 25)
                        .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterStudentTabExLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                            .addGroup(headmasterStudentTabExPanel1Layout.createSequentialGroup()
                                .addComponent(headmasterStudentTabExIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(617, Short.MAX_VALUE))
        );

        headmasterStudentTabExPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterStudentTabExBDLabel, headmasterStudentTabExFNLabel, headmasterStudentTabExLNLabel, headmasterStudentTabExPWLabel, headmasterStudentTabExTFLabel, headmasterStudentTabExUNLabel});

        headmasterStudentTabExPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterStudentTabExDelete, headmasterStudentTabExUpdate});

        headmasterStudentTabExPanel1Layout.setVerticalGroup(
            headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterStudentTabExPanel1Layout.createSequentialGroup()
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterStudentTabExUpdate)
                    .addComponent(headmasterStudentTabExLabel))
                .addGap(3, 3, 3)
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(headmasterStudentTabExDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterStudentTabExIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(headmasterStudentTabExFNField)
                    .addComponent(headmasterStudentTabExFNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headmasterStudentTabExLNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterStudentTabExLNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterStudentTabExUNLabel)
                    .addComponent(headmasterStudentTabExUNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterStudentTabExPWLabel)
                    .addComponent(headmasterStudentTabExPWField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterStudentTabExBDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterStudentTabExBDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterStudentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterStudentTabExTFLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterStudentTabExTFField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 187, Short.MAX_VALUE))
        );

        headmasterStudentTabExPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterStudentTabExBDLabel, headmasterStudentTabExFNLabel, headmasterStudentTabExLNLabel, headmasterStudentTabExPWLabel, headmasterStudentTabExTFLabel, headmasterStudentTabExUNLabel});

        headmasterStudentTabExPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterStudentTabExDelete, headmasterStudentTabExUpdate});

        headmasterStudentTabExPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterStudentTabExIDLabel, headmasterStudentTabExLabel});

        javax.swing.GroupLayout headmasterStudentTabExPanel2Layout = new javax.swing.GroupLayout(headmasterStudentTabExPanel2);
        headmasterStudentTabExPanel2.setLayout(headmasterStudentTabExPanel2Layout);
        headmasterStudentTabExPanel2Layout.setHorizontalGroup(
            headmasterStudentTabExPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 741, Short.MAX_VALUE)
        );
        headmasterStudentTabExPanel2Layout.setVerticalGroup(
            headmasterStudentTabExPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 322, Short.MAX_VALUE)
        );

        headmasterStudentTabEx.setLayer(headmasterStudentTabExPanel1, 1);
        headmasterStudentTabEx.setLayer(headmasterStudentTabExPanel2, 2);

        javax.swing.GroupLayout headmasterStudentTabExLayout = new javax.swing.GroupLayout(headmasterStudentTabEx);
        headmasterStudentTabEx.setLayout(headmasterStudentTabExLayout);
        headmasterStudentTabExLayout.setHorizontalGroup(
            headmasterStudentTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headmasterStudentTabExPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headmasterStudentTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(headmasterStudentTabExPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headmasterStudentTabExLayout.setVerticalGroup(
            headmasterStudentTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headmasterStudentTabExPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headmasterStudentTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(headmasterStudentTabExPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout headmasterStudentTabNewLayout = new javax.swing.GroupLayout(headmasterStudentTabNew);
        headmasterStudentTabNew.setLayout(headmasterStudentTabNewLayout);
        headmasterStudentTabNewLayout.setHorizontalGroup(
            headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterStudentTabNewTFLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(headmasterStudentTabNewTFField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterStudentTabNewBDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(headmasterStudentTabNewBDField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterStudentTabNewPWLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(headmasterStudentTabNewPWField))
                    .addComponent(headmasterStudentTabNewSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterStudentTabNewFNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterStudentTabNewUNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterStudentTabNewFNField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterStudentTabNewUNField, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterStudentTabNewLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                        .addComponent(headmasterStudentTabNewLNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(headmasterStudentTabNewLNField, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(headmasterStudentTabEx)
                .addContainerGap())
        );

        headmasterStudentTabNewLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterStudentTabNewBDLabel, headmasterStudentTabNewFNLabel, headmasterStudentTabNewLNLabel, headmasterStudentTabNewPWLabel, headmasterStudentTabNewTFLabel, headmasterStudentTabNewUNLabel});

        headmasterStudentTabNewLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterStudentTabNewFNField, headmasterStudentTabNewLNField, headmasterStudentTabNewPWField, headmasterStudentTabNewUNField});

        headmasterStudentTabNewLayout.setVerticalGroup(
            headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(headmasterStudentTabNewSubmit)
                            .addComponent(headmasterStudentTabNewLabel))
                        .addGap(18, 18, 18)
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(headmasterStudentTabNewFNField)
                            .addComponent(headmasterStudentTabNewFNLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterStudentTabNewLNLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterStudentTabNewLNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterStudentTabNewUNLabel)
                            .addComponent(headmasterStudentTabNewUNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterStudentTabNewPWLabel)
                            .addComponent(headmasterStudentTabNewPWField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterStudentTabNewBDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterStudentTabNewBDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(headmasterStudentTabNewTFLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterStudentTabNewTFField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(headmasterStudentTabNewLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(headmasterStudentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3)
                            .addComponent(headmasterStudentTabEx))))
                .addContainerGap())
        );

        headmasterStudentTabNewLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterStudentTabNewBDLabel, headmasterStudentTabNewFNLabel, headmasterStudentTabNewLNLabel, headmasterStudentTabNewPWLabel, headmasterStudentTabNewTFLabel, headmasterStudentTabNewUNLabel});

        headmasterStudentTabNewLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterStudentTabNewBDField, headmasterStudentTabNewFNField, headmasterStudentTabNewLNField, headmasterStudentTabNewPWField, headmasterStudentTabNewUNField});

        javax.swing.GroupLayout headmasterStudentTabLayout = new javax.swing.GroupLayout(headmasterStudentTab);
        headmasterStudentTab.setLayout(headmasterStudentTabLayout);
        headmasterStudentTabLayout.setHorizontalGroup(
            headmasterStudentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headmasterStudentTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headmasterStudentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterStudentTabNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterStudentTabScrollPane))
                .addContainerGap())
        );
        headmasterStudentTabLayout.setVerticalGroup(
            headmasterStudentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterStudentTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headmasterStudentTabScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(headmasterStudentTabNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        headmasterTabs.addTab("Students", null, headmasterStudentTab, "<html>CRUD on students<br>List of students with edit buttons + new Student button</html>");

        headmasterAssignmentTabScrollNRLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headmasterAssignmentTabScrollNRLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headmasterAssignmentTabScrollNRLabel.setText("No assignments found. Add some");
        headmasterAssignmentTabScrollPane.setViewportView(headmasterAssignmentTabScrollNRLabel);

        headmasterAssignmentTabNewLabel.setText("New Assignment");
        headmasterAssignmentTabNewLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        headmasterAssignmentTabNewCILabel.setText("Course :");

        headmasterAssignmentTabNewTitleLabel.setText("Titlte :");

        headmasterAssignmentTabNewSDLabel.setText("Submission Date :");

        headmasterAssignmentTabNewSubmit.setText("Create");
        headmasterAssignmentTabNewSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterAssignmentTabNewSubmitActionPerformed(evt);
            }
        });

        headmasterAssignmentTabNewDescLabel.setText("Description :");

        headmasterAssignmentTabNewDescField.setColumns(20);
        headmasterAssignmentTabNewDescField.setRows(5);
        headmasterAssignmentTabNewDescScrollPane.setViewportView(headmasterAssignmentTabNewDescField);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));

        headmasterAssignmentTabExUpdate.setText("Update");
        headmasterAssignmentTabExUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterAssignmentTabExUpdateActionPerformed(evt);
            }
        });

        headmasterAssignmentTabExDelete.setText("Delete");
        headmasterAssignmentTabExDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headmasterAssignmentTabExDeleteActionPerformed(evt);
            }
        });

        headmasterAssignmentTabExLabel.setText("Assignment id :");
        headmasterAssignmentTabExLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        headmasterAssignmentTabExIDLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headmasterAssignmentTabExIDLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        headmasterAssignmentTabExIDLabel.setForeground(new java.awt.Color(255, 0, 0));

        headmasterAssignmentTabExCILabel.setText("Course :");

        headmasterAssignmentTabExTitleLabel.setText("Titlte :");

        headmasterAssignmentTabExSDLabel.setText("Submission Date :");

        headmasterAssignmentTabExDescLabel.setText("Description :");

        headmasterAssignmentTabExDescField.setColumns(20);
        headmasterAssignmentTabExDescField.setRows(5);
        headmasterAssignmentTabExDescScrollPane.setViewportView(headmasterAssignmentTabExDescField);

        javax.swing.GroupLayout headmasterAssignmentTabExPanel1Layout = new javax.swing.GroupLayout(headmasterAssignmentTabExPanel1);
        headmasterAssignmentTabExPanel1.setLayout(headmasterAssignmentTabExPanel1Layout);
        headmasterAssignmentTabExPanel1Layout.setHorizontalGroup(
            headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterAssignmentTabExPanel1Layout.createSequentialGroup()
                .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headmasterAssignmentTabExPanel1Layout.createSequentialGroup()
                        .addComponent(headmasterAssignmentTabExSDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(headmasterAssignmentTabExCIField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(headmasterAssignmentTabExTitleField))
                            .addComponent(headmasterAssignmentTabExDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterAssignmentTabExSDField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(headmasterAssignmentTabExPanel1Layout.createSequentialGroup()
                        .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterAssignmentTabExUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(headmasterAssignmentTabExDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(headmasterAssignmentTabExTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(headmasterAssignmentTabExDescLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(headmasterAssignmentTabExCILabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(headmasterAssignmentTabExPanel1Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(headmasterAssignmentTabExLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(headmasterAssignmentTabExPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(headmasterAssignmentTabExIDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 185, Short.MAX_VALUE))
        );

        headmasterAssignmentTabExPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {headmasterAssignmentTabExCILabel, headmasterAssignmentTabExDescLabel, headmasterAssignmentTabExTitleLabel});

        headmasterAssignmentTabExPanel1Layout.setVerticalGroup(
            headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterAssignmentTabExPanel1Layout.createSequentialGroup()
                .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(headmasterAssignmentTabExPanel1Layout.createSequentialGroup()
                        .addComponent(headmasterAssignmentTabExUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headmasterAssignmentTabExDelete))
                    .addGroup(headmasterAssignmentTabExPanel1Layout.createSequentialGroup()
                        .addComponent(headmasterAssignmentTabExLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headmasterAssignmentTabExIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterAssignmentTabExCILabel)
                    .addComponent(headmasterAssignmentTabExCIField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterAssignmentTabExTitleLabel)
                    .addComponent(headmasterAssignmentTabExTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterAssignmentTabExSDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterAssignmentTabExSDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(headmasterAssignmentTabExPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headmasterAssignmentTabExDescLabel)
                    .addComponent(headmasterAssignmentTabExDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        headmasterAssignmentTabExPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterAssignmentTabExIDLabel, headmasterAssignmentTabExLabel});

        headmasterAssignmentTabExPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterAssignmentTabExCILabel, headmasterAssignmentTabExDescLabel, headmasterAssignmentTabExSDLabel, headmasterAssignmentTabExTitleLabel});

        javax.swing.GroupLayout headmasterAssignmentTabExPanel2Layout = new javax.swing.GroupLayout(headmasterAssignmentTabExPanel2);
        headmasterAssignmentTabExPanel2.setLayout(headmasterAssignmentTabExPanel2Layout);
        headmasterAssignmentTabExPanel2Layout.setHorizontalGroup(
            headmasterAssignmentTabExPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
        );
        headmasterAssignmentTabExPanel2Layout.setVerticalGroup(
            headmasterAssignmentTabExPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        headmasterAssignmentTabEx.setLayer(headmasterAssignmentTabExPanel1, 1);
        headmasterAssignmentTabEx.setLayer(headmasterAssignmentTabExPanel2, 2);

        javax.swing.GroupLayout headmasterAssignmentTabExLayout = new javax.swing.GroupLayout(headmasterAssignmentTabEx);
        headmasterAssignmentTabEx.setLayout(headmasterAssignmentTabExLayout);
        headmasterAssignmentTabExLayout.setHorizontalGroup(
            headmasterAssignmentTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headmasterAssignmentTabExPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headmasterAssignmentTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(headmasterAssignmentTabExPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headmasterAssignmentTabExLayout.setVerticalGroup(
            headmasterAssignmentTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headmasterAssignmentTabExPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(headmasterAssignmentTabExLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(headmasterAssignmentTabExPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout headmasterAssignmentTabNewLayout = new javax.swing.GroupLayout(headmasterAssignmentTabNew);
        headmasterAssignmentTabNew.setLayout(headmasterAssignmentTabNewLayout);
        headmasterAssignmentTabNewLayout.setHorizontalGroup(
            headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterAssignmentTabNewLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headmasterAssignmentTabNewCILabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterAssignmentTabNewTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(headmasterAssignmentTabNewLayout.createSequentialGroup()
                        .addGroup(headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headmasterAssignmentTabNewDescLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterAssignmentTabNewSDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterAssignmentTabNewSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(headmasterAssignmentTabNewTitleField)
                            .addComponent(headmasterAssignmentTabNewSDField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(headmasterAssignmentTabNewDescScrollPane)
                            .addComponent(headmasterAssignmentTabNewCIField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(headmasterAssignmentTabNewLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 254, Short.MAX_VALUE)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(headmasterAssignmentTabEx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        headmasterAssignmentTabNewLayout.setVerticalGroup(
            headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(headmasterAssignmentTabNewLayout.createSequentialGroup()
                .addGroup(headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterAssignmentTabNewSubmit)
                    .addComponent(headmasterAssignmentTabNewLabel))
                .addGap(18, 18, 18)
                .addGroup(headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterAssignmentTabNewCILabel)
                    .addComponent(headmasterAssignmentTabNewCIField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterAssignmentTabNewTitleLabel)
                    .addComponent(headmasterAssignmentTabNewTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headmasterAssignmentTabNewSDLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(headmasterAssignmentTabNewSDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(headmasterAssignmentTabNewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headmasterAssignmentTabNewDescLabel)
                    .addComponent(headmasterAssignmentTabNewDescScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(168, Short.MAX_VALUE))
            .addComponent(headmasterAssignmentTabEx)
        );

        headmasterAssignmentTabNewLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {headmasterAssignmentTabNewCIField, headmasterAssignmentTabNewSDField, headmasterAssignmentTabNewTitleField});

        javax.swing.GroupLayout headmasterAssignmentTabLayout = new javax.swing.GroupLayout(headmasterAssignmentTab);
        headmasterAssignmentTab.setLayout(headmasterAssignmentTabLayout);
        headmasterAssignmentTabLayout.setHorizontalGroup(
            headmasterAssignmentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headmasterAssignmentTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(headmasterAssignmentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(headmasterAssignmentTabNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headmasterAssignmentTabScrollPane))
                .addContainerGap())
        );
        headmasterAssignmentTabLayout.setVerticalGroup(
            headmasterAssignmentTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headmasterAssignmentTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headmasterAssignmentTabScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(headmasterAssignmentTabNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        headmasterTabs.addTab("Assignments", null, headmasterAssignmentTab, "<html>CRUD on assignments<br>List of assignments with edit buttons + new Assignment button</html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headmasterTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 1349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headmasterTabs)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * INSERT a course event handling method
     * 
     * @param evt 
     */
    private void headmasterCourseTabNewSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabNewSubmitActionPerformed
        
        String newCourseTitle = headmasterCourseTabNewTitleField.getText();
        String newCourseStream = headmasterCourseTabNewStreamField.getSelectedItem().toString();
        String newCourseType = headmasterCourseTabNewTypeField.getSelectedItem().toString();
        
        if ( newCourseTitle.length() > 0 && newCourseStream.length() > 0 && newCourseType.length() > 0 ) {
        
            model.Course newCourse = new model.Course(newCourseTitle,newCourseStream,newCourseType);
            boolean success = false;

            try {
                success = cd.insertOne(newCourse);
                new DaoUtils().close(cd.getSTMT(), cd.getPRESTMT());
            } catch (Exception ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (success) {
                headmasterCourseTabExPanel2.setVisible(true);
                initUserMenu();
            }
        
        }
        else {
        
            // TODO : inform user to fill all fields | headmaster menu | create new course
        
        }
        
    }//GEN-LAST:event_headmasterCourseTabNewSubmitActionPerformed

    /**
     * UPDATE a course event handling method
     * 
     * @param evt 
     */
    private void headmasterCourseTabExUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabExUpdateActionPerformed
        
        String newCourseTitle = headmasterCourseTabExTitleField.getText();
        String newCourseStream = headmasterCourseTabExStreamField.getSelectedItem().toString();
        String newCourseType = headmasterCourseTabExTypeField.getSelectedItem().toString();
        DefaultListModel<String> newCourseSchedules = (DefaultListModel<String>) headmasterCourseTabExSchedulesJoinedList.getModel();
        DefaultListModel<String> newCourseTrainers = (DefaultListModel<String>) headmasterCourseTabExTrainersJoinedList.getModel();
        DefaultListModel<String> newCourseStudents = (DefaultListModel<String>) headmasterCourseTabExStudentsJoinedList.getModel();
        
        model.Course newCourse = allCourses.get(headmasterCourseTabScrollTable.getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 0));
        
        if ( !newCourseTitle.isEmpty() ) newCourse.setTitle(newCourseTitle);
        
        if ( !newCourseStream.isEmpty() ) newCourse.setStream(newCourseStream);
        
        if ( !newCourseType.isEmpty() ) newCourse.setType(newCourseType);
        
        ArrayList<Integer> studentIDs = new ArrayList();
        ArrayList<Integer> trainerIDs = new ArrayList();
        ArrayList<model.Schedule> scheduleEntries = new ArrayList();
        
        for( int i = 0; i < newCourseStudents.size(); i++ ){
        
            String[] parts = newCourseStudents.elementAt(i).trim().split("\\.");
            studentIDs.add(Integer.parseInt(parts[0]));
        
        }
        
        for( int i = 0; i < newCourseTrainers.size(); i++ ){
        
            String[] parts = newCourseTrainers.elementAt(i).trim().split("\\.");
            trainerIDs.add(Integer.parseInt(parts[0]));
        
        }
        
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm");
        for( int i = 0; i < newCourseSchedules.size(); i++ ){
        
            String[] parts = newCourseSchedules.elementAt(i).trim().split(" - ");
            try { 
                
                java.util.Date start =  (java.util.Date) df.parse(parts[0].replace('T', ' '));
                java.util.Date end =  (java.util.Date) df.parse(parts[1].replace('T', ' '));
                
                Timestamp startTimestamp = new java.sql.Timestamp(start.getTime());
                Timestamp endTimestamp = new java.sql.Timestamp(end.getTime());
                
                LocalDateTime startFinal = startTimestamp.toLocalDateTime();
                LocalDateTime endFinal = endTimestamp.toLocalDateTime();
                
                model.Schedule newSchedule = new model.Schedule(newCourse.getId(), startFinal, endFinal);
                
                scheduleEntries.add(newSchedule);
                
            } catch (ParseException ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
        
        try {
            cd.updateOne(newCourse);
            cd.updateCascade(sd, newCourse.getId(), studentIDs);
            cd.updateCascade(td, newCourse.getId(), trainerIDs);
            cd.updateCascade(scd, newCourse.getId(), scheduleEntries);
            new DaoUtils().close(cd.getSTMT(), cd.getPRESTMT(), sd.getSTMT(), sd.getPRESTMT(), td.getSTMT(), td.getPRESTMT(), scd.getSTMT(), scd.getPRESTMT());
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        headmasterCourseTabExPanel2.setVisible(true);
        initUserMenu();
        
    }//GEN-LAST:event_headmasterCourseTabExUpdateActionPerformed

    /**
     * DELETE a course event handling method
     * 
     * @param evt 
     */
    private void headmasterCourseTabExDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabExDeleteActionPerformed
        
        if (Actions.deleteOne(headmasterCourseTabExIDLabel, cd)) {
            headmasterCourseTabExPanel2.setVisible(true);
            initUserMenu();
        }
        
    }//GEN-LAST:event_headmasterCourseTabExDeleteActionPerformed

    /**
     * INSERT a trainer event handling method
     * 
     * @param evt 
     */
    private void headmasterTrainerTabNewSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterTrainerTabNewSubmitActionPerformed
        
        String newTrainerFN = headmasterTrainerTabNewFNField.getText();
        String newTrainerLN = headmasterTrainerTabNewLNField.getText();
        String newTrainerUN = headmasterTrainerTabNewUNField.getText();
        char[] newTrainerPW = headmasterTrainerTabNewPWField.getPassword();
        
        if ( newTrainerFN.length() > 0 && newTrainerLN.length() > 0 && newTrainerUN.length() > 0 && Arrays.toString(newTrainerPW).length() > 0 ) {
        
            try{
            
                byte[] saltKey = DBAccess.singleton().randomSaltKeyFactory();
                byte[] hashedPW = DBAccess.singleton().hashPassword(newTrainerPW, saltKey, 65536, 512);
                model.Trainer newTrainer = new model.Trainer("trainer", newTrainerUN, hashedPW, saltKey, newTrainerFN, newTrainerLN);
                
                if (td.insertOne(newTrainer)) {
                    headmasterTrainerTabExPanel2.setVisible(true);
                    initUserMenu();
                }
                
                new DaoUtils().close(td.getSTMT(), td.getPRESTMT());
            
            }
            catch(SQLException ex){
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeySpecException ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        else {
        
            // TODO : inform user to fill all fields | headmaster menu | create new trainer
        
        }
        
    }//GEN-LAST:event_headmasterTrainerTabNewSubmitActionPerformed

    /**
     * UPDATE a trainer event handling method
     * 
     * @param evt 
     */
    private void headmasterTrainerTabExUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterTrainerTabExUpdateActionPerformed
        
        String newTrainerFN = headmasterTrainerTabExFNField.getText();
        String newTrainerLN = headmasterTrainerTabExLNField.getText();
        String newTrainerUN = headmasterTrainerTabExUNField.getText();
        char[] newTrainerPW = headmasterTrainerTabExPWField.getPassword();
        
        model.Trainer newTrainer = allTrainers.get(headmasterTrainerTabScrollTable.getValueAt(headmasterTrainerTabScrollTable.getSelectedRow(), 3));
        
        if ( !newTrainerFN.isEmpty() ) newTrainer.setFirstName(newTrainerFN);
        
        if ( !newTrainerLN.isEmpty() ) newTrainer.setLastName(newTrainerLN);
        
        if ( !newTrainerUN.isEmpty() ) newTrainer.setUsername(newTrainerUN);
            
        try{
            
            byte[] hashedPW = ( newTrainerPW.length > 0 ) ? DBAccess.singleton().hashPassword(newTrainerPW, newTrainer.getSaltKey(), 65536, 512) : newTrainer.getPassword();
            
            newTrainer.setPassword(hashedPW);

            if (td.updateOne(newTrainer)) {
                headmasterTrainerTabExPanel2.setVisible(true);
                initUserMenu();
            }
            
            new DaoUtils().close(td.getSTMT(), td.getPRESTMT());

        }
        catch(SQLException ex){
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_headmasterTrainerTabExUpdateActionPerformed

    /**
     * DELETE a trainer event handling method
     * 
     * @param evt 
     */
    private void headmasterTrainerTabExDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterTrainerTabExDeleteActionPerformed
        
        if (Actions.deleteOne(headmasterTrainerTabExIDLabel, td)) {
            headmasterTrainerTabExPanel2.setVisible(true);
            initUserMenu();
        }
        
    }//GEN-LAST:event_headmasterTrainerTabExDeleteActionPerformed

    /**
     * INSERT a student event handling method
     * 
     * @param evt 
     */
    private void headmasterStudentTabNewSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterStudentTabNewSubmitActionPerformed
        
        String newStudentFN = headmasterStudentTabNewFNField.getText();
        String newStudentLN = headmasterStudentTabNewLNField.getText();
        String newStudentUN = headmasterStudentTabNewUNField.getText();
        char[] newStudentPW = headmasterStudentTabNewPWField.getPassword();
        LocalDate newStudentBDate = headmasterStudentTabNewBDField.getDate();
        float newStudentTuition = Float.parseFloat(headmasterStudentTabNewTFField.getText());
        
        if ( newStudentFN.length() > 0 && 
                newStudentLN.length() > 0 && 
                newStudentUN.length() > 0 && 
                Arrays.toString(newStudentPW).length() > 0 && 
                newStudentBDate != null && 
                newStudentTuition >= 0 ) {
        
            try{
            
                byte[] saltKey = DBAccess.singleton().randomSaltKeyFactory();
                byte[] hashedPW = DBAccess.singleton().hashPassword(newStudentPW, saltKey, 65536, 512);
                model.Student newStudent = new model.Student(
                        "student", 
                        newStudentUN, 
                        hashedPW, 
                        saltKey, 
                        newStudentFN, 
                        newStudentLN, 
                        newStudentBDate, 
                        newStudentTuition);
                
                boolean success = false;
                
                success = sd.insertOne(newStudent);
                
                new DaoUtils().close(sd.getSTMT(), sd.getPRESTMT());
                
                if (success) {
                    headmasterStudentTabExPanel2.setVisible(true);
                    initUserMenu();
                }
            
            }
            catch(SQLException ex){
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeySpecException ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        else {
        
            // TODO : inform user to fill all fields | headmaster menu | create new student
        
        }
        
    }//GEN-LAST:event_headmasterStudentTabNewSubmitActionPerformed

    /**
     * UPDATE a student event handling method
     * 
     * @param evt 
     */
    private void headmasterStudentTabExUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterStudentTabExUpdateActionPerformed
        
        String newStudentFN = headmasterStudentTabExFNField.getText();
        String newStudentLN = headmasterStudentTabExLNField.getText();
        String newStudentUN = headmasterStudentTabExUNField.getText();
        char[] newStudentPW = headmasterStudentTabExPWField.getPassword();
        LocalDate newStudentBDate = headmasterStudentTabExBDField.getDate();
        
        model.Student newStudent = allStudents.get(headmasterStudentTabScrollTable.getValueAt(headmasterStudentTabScrollTable.getSelectedRow(), 3));
        
        float newStudentTuition = ( headmasterStudentTabExTFField.getText().length() > 0 ) ? Float.parseFloat(headmasterStudentTabExTFField.getText()) : newStudent.getTuitionFees();
        
        newStudent.setTuitionFees(newStudentTuition);
        
        if ( !newStudentFN.isEmpty() ) newStudent.setFirstName(newStudentFN);
        
        if ( !newStudentLN.isEmpty() ) newStudent.setLastName(newStudentLN);
        
        if ( !newStudentUN.isEmpty() ) newStudent.setUsername(newStudentUN);
        
        if ( newStudentBDate != null ) newStudent.setBirthDate(newStudentBDate);
            
        try{
            
            byte[] hashedPW = ( newStudentPW.length > 0 ) ? DBAccess.singleton().hashPassword(newStudentPW, newStudent.getSaltKey(), 65536, 512) : newStudent.getPassword();
            
            newStudent.setPassword(hashedPW);

            if (sd.updateOne(newStudent)) {
                headmasterStudentTabExPanel2.setVisible(true);
                initUserMenu();
            }
            
            new DaoUtils().close(sd.getSTMT(), sd.getPRESTMT());

        }
        catch(SQLException ex){
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_headmasterStudentTabExUpdateActionPerformed

    /**
     * DELETE a student event handling method
     * 
     * @param evt 
     */
    private void headmasterStudentTabExDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterStudentTabExDeleteActionPerformed
        
        if (Actions.deleteOne(headmasterStudentTabExIDLabel, sd)) {
            headmasterStudentTabExPanel2.setVisible(true);
            initUserMenu();
        }
        
    }//GEN-LAST:event_headmasterStudentTabExDeleteActionPerformed

    /**
     * INSERT an assignment event handling method
     * 
     * @param evt 
     */
    private void headmasterAssignmentTabNewSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterAssignmentTabNewSubmitActionPerformed
        
        Object[] allCoursesIds = allCourses.keySet().toArray();
        int newAssignmentCourseId =  (int)allCoursesIds[headmasterAssignmentTabNewCIField.getSelectedIndex()];
        String newAssignmentTitle = headmasterAssignmentTabNewTitleField.getText();
        LocalDate newAssignmentDate = headmasterAssignmentTabNewSDField.getDate();
        String newAssignmentDesc = headmasterAssignmentTabNewDescField.getText();
        
        if ( newAssignmentCourseId > 0 && newAssignmentTitle.length() > 0 && newAssignmentDate != null ) {
        
            model.Assignment newAssignment = new model.Assignment(newAssignmentCourseId,newAssignmentTitle,newAssignmentDate,newAssignmentDesc);
            boolean success = false;

            try {
                success = ad.insertOne(newAssignment);
                new DaoUtils().close(ad.getSTMT(), ad.getPRESTMT());
            } catch (Exception ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (success) {
                headmasterAssignmentTabExPanel2.setVisible(true);
                initUserMenu();
            }
        
        }
        else {
        
            // TODO : inform user to fill all fields | headmaster menu | create new assignment
        
        }
        
    }//GEN-LAST:event_headmasterAssignmentTabNewSubmitActionPerformed

    /**
     * UPDATE an assignment event handling method
     * 
     * @param evt 
     */
    private void headmasterAssignmentTabExUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterAssignmentTabExUpdateActionPerformed
        
        Object[] allCoursesIds = allCourses.keySet().toArray();
        int newAssignmentCourseId =  (int)allCoursesIds[headmasterAssignmentTabExCIField.getSelectedIndex()];
        String newAssignmentTitle = headmasterAssignmentTabExTitleField.getText();
        LocalDate newAssignmentDate = headmasterAssignmentTabExSDField.getDate();
        String newAssignmentDesc = headmasterAssignmentTabExDescField.getText();
        
        model.Assignment newAssignment = allAssignments.get(headmasterAssignmentTabScrollTable.getValueAt(headmasterAssignmentTabScrollTable.getSelectedRow(), 0));
        
        if ( !newAssignmentTitle.isEmpty() ) newAssignment.setTitle(newAssignmentTitle);
        
        if ( !newAssignmentDesc.isEmpty() ) newAssignment.setDescription(newAssignmentDesc);
        
        if ( newAssignmentDate != null ) newAssignment.setSubmissionDate(newAssignmentDate);
        
        newAssignment.setCourseId(newAssignmentCourseId);
            
        try{

            if (ad.updateOne(newAssignment)) {
                headmasterAssignmentTabExPanel2.setVisible(true);
                initUserMenu();
            }
            new DaoUtils().close(ad.getSTMT(), ad.getPRESTMT());

        }
        catch(SQLException ex){
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_headmasterAssignmentTabExUpdateActionPerformed

    /**
     * DELETE an assignment event handling method
     * 
     * @param evt 
     */
    private void headmasterAssignmentTabExDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterAssignmentTabExDeleteActionPerformed
        
        if (Actions.deleteOne(headmasterAssignmentTabExIDLabel, ad)) {
            headmasterAssignmentTabExPanel2.setVisible(true);
            initUserMenu();
        }
        
    }//GEN-LAST:event_headmasterAssignmentTabExDeleteActionPerformed

    
    
    /**
     * Add schedule entry to course button click event handling 
     * @param evt 
     */
    private void headmasterCourseTabExSchedulesNewAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabExSchedulesNewAddActionPerformed
        
        LocalDateTime start = headmasterCourseTabExSchedulesStart.getDateTimeStrict();
        LocalDateTime end = headmasterCourseTabExSchedulesEnd.getDateTimeStrict();
        
        if ( start != null && end != null ) {
        
            DefaultListModel<String> listNewSchedule = (DefaultListModel<String>) headmasterCourseTabExSchedulesJoinedList.getModel();
            if ( !listNewSchedule.contains(start + " - " + end) ) listNewSchedule.addElement(start + " - " + end);
        
        }
        
    }//GEN-LAST:event_headmasterCourseTabExSchedulesNewAddActionPerformed

    /**
     * Remove schedule entry from course button click event handling 
     * @param evt 
     */
    private void headmasterCourseTabExSchedulesJoinedRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabExSchedulesJoinedRemoveActionPerformed
        
        int[] array = headmasterCourseTabExSchedulesJoinedList.getSelectedIndices();
        ArrayList<Integer> selectedRowIndices = new ArrayList();
        for( int i : array ){ selectedRowIndices.add(i); }
        
        DefaultListModel<String> sourceModel = (DefaultListModel<String>) headmasterCourseTabExSchedulesJoinedList.getModel();
        
        int a = sourceModel.size();
        for( int i = a -1; i >= 0; i-- ){
        
            if ( selectedRowIndices.contains(i) ) {
                sourceModel.removeElementAt(i);
            }
        
        }
        
        headmasterCourseTabExSchedulesJoinedList.setModel(sourceModel);
        
    }//GEN-LAST:event_headmasterCourseTabExSchedulesJoinedRemoveActionPerformed

    /**
     * Add trainer to course button click event handling 
     * @param evt 
     */
    private void headmasterCourseTabExTrainersAvAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabExTrainersAvAddActionPerformed
        Actions.transport(headmasterCourseTabExTrainersAvList, headmasterCourseTabExTrainersJoinedList);
    }//GEN-LAST:event_headmasterCourseTabExTrainersAvAddActionPerformed

    /**
     * Remove trainer from course button click event handling 
     * @param evt 
     */
    private void headmasterCourseTabExTrainersJoinedRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabExTrainersJoinedRemoveActionPerformed
        Actions.transport(headmasterCourseTabExTrainersJoinedList, headmasterCourseTabExTrainersAvList);
    }//GEN-LAST:event_headmasterCourseTabExTrainersJoinedRemoveActionPerformed

    /**
     * Add student to course button click event handling 
     * @param evt 
     */
    private void headmasterCourseTabExStudentsAvAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabExStudentsAvAddActionPerformed
        Actions.transport(headmasterCourseTabExStudentsAvList, headmasterCourseTabExStudentsJoinedList);
    }//GEN-LAST:event_headmasterCourseTabExStudentsAvAddActionPerformed

    /**
     * Remove student from course button click event handling 
     * @param evt 
     */
    private void headmasterCourseTabExStudentsJoinedRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headmasterCourseTabExStudentsJoinedRemoveActionPerformed
        Actions.transport(headmasterCourseTabExStudentsJoinedList, headmasterCourseTabExStudentsAvList);
    }//GEN-LAST:event_headmasterCourseTabExStudentsJoinedRemoveActionPerformed

    @Override
    public void initUserMenu(){
        
        ResultSet rs = null;
        cd = new CourseDao();
        td = new TrainerDao();
        sd = new StudentDao();
        ad = new AssignmentDao();
        scd = new ScheduleDao();
        
        initCourses(cd, rs);
        initTrainers(td, rs);
        initStudents(sd, rs);
        initAssignments(ad, rs);
        
        try {
            new DaoUtils().close(rs, cd.getSTMT(), td.getSTMT(), sd.getSTMT(), ad.getSTMT(), cd.getPRESTMT(), td.getPRESTMT(), sd.getPRESTMT(), ad.getPRESTMT());
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    
    /*********************************
     * BUILD THE courses TAB CONTENT *
     * @param cd can take new CourseDao() for ease
     * @param rs takes null
     *********************************/
    public void initCourses(CourseDao cd, ResultSet rs){
    
        allCourses = new LinkedHashMap();
        
        try {
            rs = cd.getAll();
            allCourses = new DaoUtils().coursify(rs);
        } catch (SQLException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if ( !allCourses.isEmpty() ) {
            
            //add message to update panel
            headmasterCourseTabExPanel2.setLayout(new java.awt.BorderLayout());
            headmasterCourseTabExPanel2.add(view.Actions.getNewLabel("Select a course to enable editing"));
            
            //prepare the table with the courses
            DefaultTableCellRenderer centerRendererCourses = new DefaultTableCellRenderer();
            centerRendererCourses.setHorizontalAlignment( JLabel.CENTER );
            int rows = allCourses.entrySet().size();
            String[] header = {"ID", "Title", "Stream", "Type"};
            headmasterCourseTabScrollTableModel = new DefaultTableModel(null, header)
            {
                @Override
                public Class<?> getColumnClass(int col) {
                    return getValueAt(0, col).getClass();
                }
            };
            
            headmasterCourseTabScrollTable = new JTable(headmasterCourseTabScrollTableModel){
            
                @Override
                public boolean isCellEditable(int row, int column){
                    return false;
                }
            };
            headmasterCourseTabScrollTable.setRowHeight(40);
            
            headmasterCourseTabScrollTable.getColumn("ID").setMaxWidth(50);
            headmasterCourseTabScrollTable.getColumn("ID").setMinWidth(50);
            headmasterCourseTabScrollTable.getColumn("ID").setCellRenderer(centerRendererCourses );
            
            headmasterCourseTabScrollTable.getColumn("Title").setMinWidth(200);
            
            headmasterCourseTabScrollTable.getColumn("Stream").setMaxWidth(100);
            headmasterCourseTabScrollTable.getColumn("Stream").setMinWidth(100);
            
            headmasterCourseTabScrollTable.getColumn("Type").setMaxWidth(100);
            headmasterCourseTabScrollTable.getColumn("Type").setMinWidth(100);
            
            //set scroll
            Dimension d = new Dimension(320, rows * headmasterCourseTabScrollTable.getRowHeight());
            headmasterCourseTabScrollTable.setPreferredScrollableViewportSize(d);
            
            //remove all courses in the dropdown option of new assignment tab
            headmasterAssignmentTabNewCIField.removeAllItems();
            
            // add rows
            allCourses.entrySet().forEach((me) -> {
                
                //add courses in the dropdown option of new assignment tab
                headmasterAssignmentTabNewCIField.addItem(me.getKey() + " | " + me.getValue().getType() + " | " + me.getValue().getStream() + " | " + me.getValue().getTitle());
                
                headmasterCourseTabScrollTableModel.addRow(new Object[]{
                
                    me.getKey(), me.getValue().getTitle(), me.getValue().getStream(), me.getValue().getType()
                
                });
            });
            
            //when user selects a row then the selected course's details are loaded to the edit fields
            headmasterCourseTabScrollTable.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
                
                if (!event.getValueIsAdjusting()) {
                
                    //remove cover panel
                    headmasterCourseTabExPanel2.setVisible(false);

                    /**
                     * add selected course details to the existing course edit fields
                     */

                    //add id
                    headmasterCourseTabExIDLabel.setText(headmasterCourseTabScrollTable
                                    .getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 0)
                                    .toString());

                    // add title
                    headmasterCourseTabExTitleField.setText(
                            headmasterCourseTabScrollTable
                                    .getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 1)
                                    .toString());

                    //add stream
                    headmasterCourseTabExStreamField.setSelectedIndex(
                            Utils.CourseStream.valueOf(
                                    headmasterCourseTabScrollTable
                                            .getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 2)
                                            .toString().toUpperCase())
                                    .ordinal());

                    //add type
                    headmasterCourseTabExTypeField.setSelectedIndex(
                            Utils.CourseType.valueOf(
                                    headmasterCourseTabScrollTable
                                            .getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 3)
                                            .toString().toUpperCase())
                                    .ordinal());
                    
                    /**
                     * show selected students : 
                     * 1. get all students
                     * 2. get all students of this course
                     * 3. remove 2 from 1
                     * 4. show current and available students in their respective fields
                     */
                    
                    LinkedHashMap<String, model.Student> stds = (LinkedHashMap<String, model.Student>)allStudents.clone();
                    LinkedHashMap<String, model.Student> currentStudents = new LinkedHashMap();
                    ResultSet rs1 = null;
                    DefaultListModel<String> listAvailStudents = new DefaultListModel(), listCurrStudents = new DefaultListModel();
        
                    //get all students that already belong to this course
                    try {
                        rs1 = sd.getAllPerCourse((int) headmasterCourseTabScrollTable.getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 0));
                        currentStudents = new DaoUtils().studentify(rs1);
                        
                        new DaoUtils().close(rs1, sd.getSTMT(), sd.getPRESTMT());
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NullPointerException ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        
                    //remove students that already belong to this course from the all students collection
                    stds.keySet().removeAll(currentStudents.keySet());
                    
                    //show students that don't already belong to this course
                    stds.entrySet().forEach((me) -> {
                        listAvailStudents.addElement(Integer.toString(me.getValue().getId()) + ". " + me.getValue().getLastName() + " " + me.getValue().getFirstName());
                    });
                    headmasterCourseTabExStudentsAvList.setModel(listAvailStudents);
                    
                    //show students that already belong to this course
                    currentStudents.entrySet().forEach((me) -> {
                        listCurrStudents.addElement(Integer.toString(me.getValue().getId()) + ". " + me.getValue().getLastName() + " " + me.getValue().getFirstName());
                    });
                    headmasterCourseTabExStudentsJoinedList.setModel(listCurrStudents);
                    
                    /**
                     * show selected trainers : 
                     * 1. get all trainers
                     * 2. get all trainers of this course
                     * 3. remove 2 from 1
                     * 4. show current and available trainers in their respective fields
                     */
                    
                    LinkedHashMap<String, model.Trainer> trnrs = (LinkedHashMap<String, model.Trainer>)allTrainers.clone();
                    LinkedHashMap<String, model.Trainer> currentTrainers = new LinkedHashMap();
                    ResultSet rs2 = null;
                    DefaultListModel<String> listAvailTrainers = new DefaultListModel(), listCurrTrainers = new DefaultListModel();
        
                    //get all trainers that already belong to this course
                    try {
                        rs2 = td.getAllPerCourse((int) headmasterCourseTabScrollTable.getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 0));
                        currentTrainers = new DaoUtils().trainerify(rs2);
                        
                        new DaoUtils().close(rs2, td.getSTMT(), td.getPRESTMT());
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NullPointerException ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        
                    //remove trainers that already belong to this course from the all students collection
                    trnrs.keySet().removeAll(currentTrainers.keySet());
                    
                    //show trainers that don't already belong to this course
                    trnrs.entrySet().forEach((me) -> {
                        listAvailTrainers.addElement(Integer.toString(me.getValue().getId()) + ". " + me.getValue().getLastName() + " " + me.getValue().getFirstName());
                    });
                    headmasterCourseTabExTrainersAvList.setModel(listAvailTrainers);
                    
                    //show trainers that already belong to this course
                    currentTrainers.entrySet().forEach((me) -> {
                        listCurrTrainers.addElement(Integer.toString(me.getValue().getId()) + ". " + me.getValue().getLastName() + " " + me.getValue().getFirstName());
                    });
                    headmasterCourseTabExTrainersJoinedList.setModel(listCurrTrainers);
                    
                    /**
                     * show selected assignments : 
                     * 1. get all assignments of this course
                     * 2. show current assignments in their respective fields
                     */
                    
                    LinkedHashMap<Integer, model.Assignment> currentAssignments = new LinkedHashMap();
                    ResultSet rs3 = null;
                    DefaultListModel<String> listCurrAssignments = new DefaultListModel();
        
                    //get all assignments that already belong to this course
                    try {
                        rs3 = ad.getAllPerCourse((int) headmasterCourseTabScrollTable.getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 0));
                        currentAssignments = new DaoUtils().assignmentify(rs3);
                        
                        new DaoUtils().close(rs3, ad.getSTMT(), ad.getPRESTMT());
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NullPointerException ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    //show assignments that already belong to this course
                    currentAssignments.entrySet().forEach((me) -> {
                        listCurrAssignments.addElement(Integer.toString(me.getValue().getId()) + ". " + me.getValue().getTitle() + " " + me.getValue().getSubmissionDate());
                    });
                    headmasterCourseTabExAssignmentsJoinedList.setModel(listCurrAssignments);
                    
                    /**
                     * show schedules : 
                     * 1. get all schedules of this course
                     * 2. show current schedules in their respective fields
                     */
                    
                    ArrayList<model.Schedule> schedulePerCourse = new ArrayList();
                    ResultSet rs4 = null;
                    DefaultListModel<String> listCurrSchedules = new DefaultListModel();
        
                    //get all schedules that already belong to this course
                    try {
                        rs4 = scd.getAllPerCourse((int) headmasterCourseTabScrollTable.getValueAt(headmasterCourseTabScrollTable.getSelectedRow(), 0));
                        schedulePerCourse = new DaoUtils().schedulify(rs4);
                        
                        new DaoUtils().close(rs4, scd.getSTMT(), scd.getPRESTMT());
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (NullPointerException ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    //show schedules that already belong to this course
                    schedulePerCourse.forEach((me) -> {
                        listCurrSchedules.addElement(me.getStart() + " - " + me.getEnd());
                    });
                    headmasterCourseTabExSchedulesJoinedList.setModel(listCurrSchedules);
                    
                    

                    headmasterCourseTabEx.revalidate();
                    headmasterCourseTabEx.repaint();
                
                }
                
            });
            
            
            //add table to scroll pane
            headmasterCourseTabScrollPane.setViewportView(headmasterCourseTabScrollTable);
//            headmasterCourseTabScrollTableBarV = headmasterCourseTabScrollPane.getVerticalScrollBar();
//            headmasterCourseTabScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
        }
        
        try {
            new DaoUtils().close(rs, cd.getSTMT(), cd.getPRESTMT());
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /************************I*********
     * BUILD THE trainers TAB CONTENT *
     * @param td can take new TrainerDao() for ease
     * @param rs takes null
     **********************************/
    public void initTrainers(TrainerDao td, ResultSet rs){
    

        
        allTrainers = new LinkedHashMap();
        
        try {
            rs = td.getAll();
            allTrainers = new DaoUtils().trainerify(rs);
        } catch (SQLException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if ( !allTrainers.isEmpty() ) {
            
            //add message to update panel
            headmasterTrainerTabExPanel2.setLayout(new java.awt.BorderLayout());
            headmasterTrainerTabExPanel2.add(view.Actions.getNewLabel("Select a trainer to enable editing"));
        
            //prepare the table with the trainers
            DefaultTableCellRenderer centerRendererTrainers = new DefaultTableCellRenderer();
            centerRendererTrainers.setHorizontalAlignment( JLabel.CENTER );
            int rows = allTrainers.entrySet().size();
            String[] header = {"ID", "First Name", "Last Name", "Username"};
            headmasterTrainerTabScrollTableModel = new DefaultTableModel(null, header)
            {
                @Override
                public Class<?> getColumnClass(int col) {
                    return getValueAt(0, col).getClass();
                }
            };
            
            headmasterTrainerTabScrollTable = new JTable(headmasterTrainerTabScrollTableModel){
            
                @Override
                public boolean isCellEditable(int row, int column){
                    return false;
                }
            };
            headmasterTrainerTabScrollTable.setRowHeight(40);
            
            headmasterTrainerTabScrollTable.getColumn("ID").setMaxWidth(50);
            headmasterTrainerTabScrollTable.getColumn("ID").setMinWidth(50);
            headmasterTrainerTabScrollTable.getColumn("ID").setCellRenderer(centerRendererTrainers );
            
            headmasterTrainerTabScrollTable.getColumn("First Name").setMinWidth(100);
            headmasterTrainerTabScrollTable.getColumn("Last Name").setMinWidth(100);
            headmasterTrainerTabScrollTable.getColumn("Username").setMinWidth(100);
            
            //set scroll
            Dimension d2 = new Dimension(320, rows * headmasterTrainerTabScrollTable.getRowHeight());
            headmasterTrainerTabScrollTable.setPreferredScrollableViewportSize(d2);
            
            // add rows
            allTrainers.entrySet().forEach((me) -> {
                
                headmasterTrainerTabScrollTableModel.addRow(new Object[]{
                
                    me.getValue().getId(), me.getValue().getFirstName(), me.getValue().getLastName(), me.getKey()
                
                });
                
            });
            
            //when user selects a row then the selected trainer's details are loaded to the edit fields
            headmasterTrainerTabScrollTable.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
                
                if (!event.getValueIsAdjusting()) {
            
                    //remove cover panel
                    headmasterTrainerTabExPanel2.setVisible(false);

                    /**
                     * add selected trainer details to the existing trainer edit fields
                     */

                    //add id
                    headmasterTrainerTabExIDLabel.setText(headmasterTrainerTabScrollTable
                                    .getValueAt(headmasterTrainerTabScrollTable.getSelectedRow(), 0)
                                    .toString());

                    //add first name
                    headmasterTrainerTabExFNField.setText(headmasterTrainerTabScrollTable
                                    .getValueAt(headmasterTrainerTabScrollTable.getSelectedRow(), 1)
                                    .toString());

                    //add last name
                    headmasterTrainerTabExLNField.setText(headmasterTrainerTabScrollTable
                                    .getValueAt(headmasterTrainerTabScrollTable.getSelectedRow(), 2)
                                    .toString());

                    //add username
                    headmasterTrainerTabExUNField.setText(headmasterTrainerTabScrollTable
                                    .getValueAt(headmasterTrainerTabScrollTable.getSelectedRow(), 3)
                                    .toString());
                    
                    //add empty password
                    headmasterTrainerTabExPWField.setText("");



                    headmasterTrainerTabEx.revalidate();
                    headmasterTrainerTabEx.repaint();
                
                }
                
            });
            
            //add table to scroll pane
            headmasterTrainerTabScrollPane.setViewportView(headmasterTrainerTabScrollTable);
        
        }
        
        try {
            new DaoUtils().close(rs, td.getSTMT(), td.getPRESTMT());
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    
    /************************I*********
     * BUILD THE students TAB CONTENT *
     * @param sd can take new StudentDao() for ease
     * @param rs takes null
     **********************************/
    public void initStudents(StudentDao sd, ResultSet rs){
    

        
        allStudents = new LinkedHashMap();
        
        try {
            rs = sd.getAll();
            allStudents = new DaoUtils().studentify(rs);
        } catch (SQLException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if ( !allStudents.isEmpty() ) {
            
            //add message to update panel
            headmasterStudentTabExPanel2.setLayout(new java.awt.BorderLayout());
            headmasterStudentTabExPanel2.add(view.Actions.getNewLabel("Select a student to enable editing"));
        
            //prepare the table with the students
            DefaultTableCellRenderer centerRendererStudents = new DefaultTableCellRenderer();
            centerRendererStudents.setHorizontalAlignment( JLabel.CENTER );
            int rows = allStudents.entrySet().size();
            String[] header = {"ID", "First Name", "Last Name", "Username", "Birthday", "Tuition"};
            headmasterStudentTabScrollTableModel = new DefaultTableModel(null, header)
            {
                @Override
                public Class<?> getColumnClass(int col) {
                    return getValueAt(0, col).getClass();
                }
            };
            
            headmasterStudentTabScrollTable = new JTable(headmasterStudentTabScrollTableModel){
            
                @Override
                public boolean isCellEditable(int row, int column){
                    return false;
                }
            };
            headmasterStudentTabScrollTable.setRowHeight(40);
            
            headmasterStudentTabScrollTable.getColumn("ID").setMaxWidth(50);
            headmasterStudentTabScrollTable.getColumn("ID").setMinWidth(50);
            headmasterStudentTabScrollTable.getColumn("ID").setCellRenderer(centerRendererStudents );
            
            headmasterStudentTabScrollTable.getColumn("First Name").setMinWidth(100);
            headmasterStudentTabScrollTable.getColumn("Last Name").setMinWidth(100);
            headmasterStudentTabScrollTable.getColumn("Username").setMinWidth(100);
            headmasterStudentTabScrollTable.getColumn("Birthday").setMinWidth(100);
            headmasterStudentTabScrollTable.getColumn("Tuition").setMinWidth(100);
            
            //set scroll
            Dimension d3 = new Dimension(320, rows * headmasterStudentTabScrollTable.getRowHeight());
            headmasterStudentTabScrollTable.setPreferredScrollableViewportSize(d3);
            
            // add rows
            allStudents.entrySet().forEach((me) -> {
                
                headmasterStudentTabScrollTableModel.addRow(new Object[]{
                
                    me.getValue().getId(), me.getValue().getFirstName(), me.getValue().getLastName(), me.getKey(), me.getValue().getBirthDate(), me.getValue().getTuitionFees()
                
                });
                
            });
            
            //when user selects a row then the selected student's details are loaded to the edit fields
            headmasterStudentTabScrollTable.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            
                if (!event.getValueIsAdjusting()) {
                    
                    //remove cover panel
                    headmasterStudentTabExPanel2.setVisible(false);

                    /**
                     * add selected student details to the existing student edit fields
                     */

                    //add id
                    headmasterStudentTabExIDLabel.setText(headmasterStudentTabScrollTable
                                    .getValueAt(headmasterStudentTabScrollTable.getSelectedRow(), 0)
                                    .toString());

                    //add first name
                    headmasterStudentTabExFNField.setText(headmasterStudentTabScrollTable
                                    .getValueAt(headmasterStudentTabScrollTable.getSelectedRow(), 1)
                                    .toString());

                    //add last name
                    headmasterStudentTabExLNField.setText(headmasterStudentTabScrollTable
                                    .getValueAt(headmasterStudentTabScrollTable.getSelectedRow(), 2)
                                    .toString());

                    //add username
                    headmasterStudentTabExUNField.setText(headmasterStudentTabScrollTable
                                    .getValueAt(headmasterStudentTabScrollTable.getSelectedRow(), 3)
                                    .toString());

                    //add birthday
                    headmasterStudentTabExBDField.setText(headmasterStudentTabScrollTable
                                    .getValueAt(headmasterStudentTabScrollTable.getSelectedRow(), 4)
                                    .toString());

                    //add tuition fees
                    headmasterStudentTabExTFField.setText(headmasterStudentTabScrollTable
                                    .getValueAt(headmasterStudentTabScrollTable.getSelectedRow(), 5)
                                    .toString());
                    
                    //add empty password
                    headmasterStudentTabExPWField.setText("");

                    headmasterStudentTabEx.revalidate();
                    headmasterStudentTabEx.repaint();
                
                }
                
            });
            
            //add table to scroll pane
            headmasterStudentTabScrollPane.setViewportView(headmasterStudentTabScrollTable);
        
        }
        
        try {
            new DaoUtils().close(rs, sd.getSTMT(), sd.getPRESTMT());
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    
    /************************I************
     * BUILD THE assignments TAB CONTENT *
     * @param ad can take new AssignmentDao() for ease
     * @param rs takes null
     *************************************/
    public void initAssignments(AssignmentDao ad, ResultSet rs){
    

        
        allAssignments = new LinkedHashMap();
        
        try {
            rs = ad.getAll();
            allAssignments = new DaoUtils().assignmentify(rs);
        } catch (SQLException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if ( !allAssignments.isEmpty() ) {
            
            //add message to update panel
            headmasterAssignmentTabExPanel2.setLayout(new java.awt.BorderLayout());
            headmasterAssignmentTabExPanel2.add(view.Actions.getNewLabel("Select an assignment to enable editing"));
        
            //prepare the table with the assignments
            DefaultTableCellRenderer centerRendererAssignments = new DefaultTableCellRenderer();
            centerRendererAssignments.setHorizontalAlignment( JLabel.CENTER );
            int rows = allAssignments.entrySet().size();
            String[] header = {"ID", "id|Course Type|Stream|Title", "Title", "Submission Date","Description"};
            headmasterAssignmentTabScrollTableModel = new DefaultTableModel(null, header)
            {
                @Override
                public Class<?> getColumnClass(int col) {
                    return getValueAt(0, col).getClass();
                }
            };
            
            headmasterAssignmentTabScrollTable = new JTable(headmasterAssignmentTabScrollTableModel){
            
                @Override
                public boolean isCellEditable(int row, int column){
                    return false;
                }
            };
            headmasterAssignmentTabScrollTable.setRowHeight(40);
            
            headmasterAssignmentTabScrollTable.getColumn("ID").setMaxWidth(50);
            headmasterAssignmentTabScrollTable.getColumn("ID").setMinWidth(50);
            headmasterAssignmentTabScrollTable.getColumn("ID").setCellRenderer(centerRendererAssignments );
            
            headmasterAssignmentTabScrollTable.getColumn("id|Course Type|Stream|Title").setMinWidth(100);
            headmasterAssignmentTabScrollTable.getColumn("Title").setMinWidth(100);
            headmasterAssignmentTabScrollTable.getColumn("Submission Date").setMaxWidth(100);
            headmasterAssignmentTabScrollTable.getColumn("Description").setMinWidth(200);
            
            //set scroll
            Dimension d4 = new Dimension(320, rows * headmasterAssignmentTabScrollTable.getRowHeight());
            headmasterAssignmentTabScrollTable.setPreferredScrollableViewportSize(d4);
            
            // add rows
            allAssignments.entrySet().forEach((me) -> {
            
                headmasterAssignmentTabScrollTableModel.addRow(new Object[]{
                
                    me.getKey(), 
                    me.getValue().getCourseId() 
                            + " | " + allCourses.get(me.getValue().getCourseId()).getType() 
                            + " | " + allCourses.get(me.getValue().getCourseId()).getStream() 
                            + " | " + allCourses.get(me.getValue().getCourseId()).getTitle(), 
                    me.getValue().getTitle(), 
                    me.getValue().getSubmissionDate(), 
                    me.getValue().getDescription()
                
                });
                
            });
            
            //when user selects a row then the selected assignment's details are loaded to the edit fields
            headmasterAssignmentTabScrollTable.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            
                if (!event.getValueIsAdjusting()) {
                
                    //remove cover panel
                    headmasterAssignmentTabExPanel2.setVisible(false);

                    /**
                     * add selected assignment details to the existing assignment edit fields
                     */

                    //add id
                    headmasterAssignmentTabExIDLabel.setText(headmasterAssignmentTabScrollTable
                                    .getValueAt(headmasterAssignmentTabScrollTable.getSelectedRow(), 0)
                                    .toString());

                    // add course
                    ComboBoxModel<String> availableCoursesAtm = headmasterAssignmentTabNewCIField.getModel();
                    int coursesNo = availableCoursesAtm.getSize();
                    headmasterAssignmentTabExCIField.removeAllItems();
                    for( int i = 0; i < coursesNo; i++ ){

                        headmasterAssignmentTabExCIField.addItem(availableCoursesAtm.getElementAt(i));

                    }
                    headmasterAssignmentTabExCIField.setSelectedItem(headmasterAssignmentTabScrollTable
                                    .getValueAt(headmasterAssignmentTabScrollTable.getSelectedRow(), 1)
                                    .toString());

                    //add title
                    headmasterAssignmentTabExTitleField.setText(headmasterAssignmentTabScrollTable
                                    .getValueAt(headmasterAssignmentTabScrollTable.getSelectedRow(), 2)
                                    .toString());

                    //add submission date
                    headmasterAssignmentTabExSDField.setText(headmasterAssignmentTabScrollTable
                                    .getValueAt(headmasterAssignmentTabScrollTable.getSelectedRow(), 3)
                                    .toString());

                    //add description (can be null)
                    String finalDesc = ( headmasterAssignmentTabScrollTable
                                    .getValueAt(headmasterAssignmentTabScrollTable.getSelectedRow(), 4) != null ) ? headmasterAssignmentTabScrollTable
                                    .getValueAt(headmasterAssignmentTabScrollTable.getSelectedRow(), 4).toString() : "";
                    headmasterAssignmentTabExDescField.setText(finalDesc);

                    headmasterAssignmentTabEx.revalidate();
                    headmasterAssignmentTabEx.repaint();
                
                }
            
            });
            
            //add table to scroll pane
            headmasterAssignmentTabScrollPane.setViewportView(headmasterAssignmentTabScrollTable);
        
        }
        
        try {
            new DaoUtils().close(rs, ad.getSTMT(), ad.getPRESTMT());
        } catch (Exception ex) {
            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel headmasterAssignmentTab;
    private javax.swing.JLayeredPane headmasterAssignmentTabEx;
    private javax.swing.JComboBox<String> headmasterAssignmentTabExCIField;
    private javax.swing.JLabel headmasterAssignmentTabExCILabel;
    private javax.swing.JButton headmasterAssignmentTabExDelete;
    private javax.swing.JTextArea headmasterAssignmentTabExDescField;
    private javax.swing.JLabel headmasterAssignmentTabExDescLabel;
    private javax.swing.JScrollPane headmasterAssignmentTabExDescScrollPane;
    private javax.swing.JLabel headmasterAssignmentTabExIDLabel;
    private javax.swing.JLabel headmasterAssignmentTabExLabel;
    private javax.swing.JPanel headmasterAssignmentTabExPanel1;
    private javax.swing.JPanel headmasterAssignmentTabExPanel2;
    private com.github.lgooddatepicker.components.DatePicker headmasterAssignmentTabExSDField;
    private javax.swing.JLabel headmasterAssignmentTabExSDLabel;
    private javax.swing.JTextField headmasterAssignmentTabExTitleField;
    private javax.swing.JLabel headmasterAssignmentTabExTitleLabel;
    private javax.swing.JButton headmasterAssignmentTabExUpdate;
    private javax.swing.JPanel headmasterAssignmentTabNew;
    private javax.swing.JComboBox<String> headmasterAssignmentTabNewCIField;
    private javax.swing.JLabel headmasterAssignmentTabNewCILabel;
    private javax.swing.JTextArea headmasterAssignmentTabNewDescField;
    private javax.swing.JLabel headmasterAssignmentTabNewDescLabel;
    private javax.swing.JScrollPane headmasterAssignmentTabNewDescScrollPane;
    private javax.swing.JLabel headmasterAssignmentTabNewLabel;
    private com.github.lgooddatepicker.components.DatePicker headmasterAssignmentTabNewSDField;
    private javax.swing.JLabel headmasterAssignmentTabNewSDLabel;
    private javax.swing.JButton headmasterAssignmentTabNewSubmit;
    private javax.swing.JTextField headmasterAssignmentTabNewTitleField;
    private javax.swing.JLabel headmasterAssignmentTabNewTitleLabel;
    private javax.swing.JLabel headmasterAssignmentTabScrollNRLabel;
    private javax.swing.JScrollPane headmasterAssignmentTabScrollPane;
    private javax.swing.JPanel headmasterCourseTab;
    private javax.swing.JLayeredPane headmasterCourseTabEx;
    private javax.swing.JList<String> headmasterCourseTabExAssignmentsJoinedList;
    private javax.swing.JScrollPane headmasterCourseTabExAssignmentsJoinedScroll;
    private javax.swing.JLabel headmasterCourseTabExAssignmentsLabel;
    private javax.swing.JButton headmasterCourseTabExDelete;
    private javax.swing.JLabel headmasterCourseTabExIDLabel;
    private javax.swing.JLabel headmasterCourseTabExLabel;
    private javax.swing.JPanel headmasterCourseTabExPanel1;
    private javax.swing.JPanel headmasterCourseTabExPanel2;
    private com.github.lgooddatepicker.components.DateTimePicker headmasterCourseTabExSchedulesEnd;
    private javax.swing.JList<String> headmasterCourseTabExSchedulesJoinedList;
    private javax.swing.JButton headmasterCourseTabExSchedulesJoinedRemove;
    private javax.swing.JScrollPane headmasterCourseTabExSchedulesJoinedScroll;
    private javax.swing.JLabel headmasterCourseTabExSchedulesLabel;
    private javax.swing.JLabel headmasterCourseTabExSchedulesLabelEnd;
    private javax.swing.JLabel headmasterCourseTabExSchedulesLabelStart;
    private javax.swing.JButton headmasterCourseTabExSchedulesNewAdd;
    private javax.swing.JPanel headmasterCourseTabExSchedulesPanel;
    private com.github.lgooddatepicker.components.DateTimePicker headmasterCourseTabExSchedulesStart;
    private javax.swing.JComboBox<String> headmasterCourseTabExStreamField;
    private javax.swing.JLabel headmasterCourseTabExStreamLabel;
    private javax.swing.JButton headmasterCourseTabExStudentsAvAdd;
    private javax.swing.JList<String> headmasterCourseTabExStudentsAvList;
    private javax.swing.JScrollPane headmasterCourseTabExStudentsAvScroll;
    private javax.swing.JList<String> headmasterCourseTabExStudentsJoinedList;
    private javax.swing.JButton headmasterCourseTabExStudentsJoinedRemove;
    private javax.swing.JScrollPane headmasterCourseTabExStudentsJoinedScroll;
    private javax.swing.JLabel headmasterCourseTabExStudentsLabel;
    private javax.swing.JTextField headmasterCourseTabExTitleField;
    private javax.swing.JLabel headmasterCourseTabExTitleLabel;
    private javax.swing.JButton headmasterCourseTabExTrainersAvAdd;
    private javax.swing.JList<String> headmasterCourseTabExTrainersAvList;
    private javax.swing.JScrollPane headmasterCourseTabExTrainersAvScroll;
    private javax.swing.JList<String> headmasterCourseTabExTrainersJoinedList;
    private javax.swing.JButton headmasterCourseTabExTrainersJoinedRemove;
    private javax.swing.JScrollPane headmasterCourseTabExTrainersJoinedScroll;
    private javax.swing.JLabel headmasterCourseTabExTrainersLabel;
    private javax.swing.JComboBox<String> headmasterCourseTabExTypeField;
    private javax.swing.JLabel headmasterCourseTabExTypeLabel;
    private javax.swing.JButton headmasterCourseTabExUpdate;
    private javax.swing.JPanel headmasterCourseTabNew;
    private javax.swing.JLabel headmasterCourseTabNewLabel;
    private javax.swing.JComboBox<String> headmasterCourseTabNewStreamField;
    private javax.swing.JLabel headmasterCourseTabNewStreamLabel;
    private javax.swing.JButton headmasterCourseTabNewSubmit;
    private javax.swing.JTextField headmasterCourseTabNewTitleField;
    private javax.swing.JLabel headmasterCourseTabNewTitleLabel;
    private javax.swing.JComboBox<String> headmasterCourseTabNewTypeField;
    private javax.swing.JLabel headmasterCourseTabNewTypeLabel;
    private javax.swing.JLabel headmasterCourseTabScrollNRLabel;
    private javax.swing.JScrollPane headmasterCourseTabScrollPane;
    private javax.swing.JPanel headmasterStudentTab;
    private javax.swing.JLayeredPane headmasterStudentTabEx;
    private com.github.lgooddatepicker.components.DatePicker headmasterStudentTabExBDField;
    private javax.swing.JLabel headmasterStudentTabExBDLabel;
    private javax.swing.JButton headmasterStudentTabExDelete;
    private javax.swing.JTextField headmasterStudentTabExFNField;
    private javax.swing.JLabel headmasterStudentTabExFNLabel;
    private javax.swing.JLabel headmasterStudentTabExIDLabel;
    private javax.swing.JTextField headmasterStudentTabExLNField;
    private javax.swing.JLabel headmasterStudentTabExLNLabel;
    private javax.swing.JLabel headmasterStudentTabExLabel;
    private javax.swing.JPasswordField headmasterStudentTabExPWField;
    private javax.swing.JLabel headmasterStudentTabExPWLabel;
    private javax.swing.JPanel headmasterStudentTabExPanel1;
    private javax.swing.JPanel headmasterStudentTabExPanel2;
    private javax.swing.JTextField headmasterStudentTabExTFField;
    private javax.swing.JLabel headmasterStudentTabExTFLabel;
    private javax.swing.JTextField headmasterStudentTabExUNField;
    private javax.swing.JLabel headmasterStudentTabExUNLabel;
    private javax.swing.JButton headmasterStudentTabExUpdate;
    private javax.swing.JPanel headmasterStudentTabNew;
    private com.github.lgooddatepicker.components.DatePicker headmasterStudentTabNewBDField;
    private javax.swing.JLabel headmasterStudentTabNewBDLabel;
    private javax.swing.JTextField headmasterStudentTabNewFNField;
    private javax.swing.JLabel headmasterStudentTabNewFNLabel;
    private javax.swing.JTextField headmasterStudentTabNewLNField;
    private javax.swing.JLabel headmasterStudentTabNewLNLabel;
    private javax.swing.JLabel headmasterStudentTabNewLabel;
    private javax.swing.JPasswordField headmasterStudentTabNewPWField;
    private javax.swing.JLabel headmasterStudentTabNewPWLabel;
    private javax.swing.JButton headmasterStudentTabNewSubmit;
    private javax.swing.JTextField headmasterStudentTabNewTFField;
    private javax.swing.JLabel headmasterStudentTabNewTFLabel;
    private javax.swing.JTextField headmasterStudentTabNewUNField;
    private javax.swing.JLabel headmasterStudentTabNewUNLabel;
    private javax.swing.JLabel headmasterStudentTabScrollNRLabel;
    private javax.swing.JScrollPane headmasterStudentTabScrollPane;
    private javax.swing.JTabbedPane headmasterTabs;
    private javax.swing.JPanel headmasterTrainerTab;
    private javax.swing.JLayeredPane headmasterTrainerTabEx;
    private javax.swing.JButton headmasterTrainerTabExDelete;
    private javax.swing.JTextField headmasterTrainerTabExFNField;
    private javax.swing.JLabel headmasterTrainerTabExFNLabel;
    private javax.swing.JLabel headmasterTrainerTabExIDLabel;
    private javax.swing.JTextField headmasterTrainerTabExLNField;
    private javax.swing.JLabel headmasterTrainerTabExLNLabel;
    private javax.swing.JLabel headmasterTrainerTabExLabel;
    private javax.swing.JPasswordField headmasterTrainerTabExPWField;
    private javax.swing.JLabel headmasterTrainerTabExPWLabel;
    private javax.swing.JPanel headmasterTrainerTabExPanel1;
    private javax.swing.JPanel headmasterTrainerTabExPanel2;
    private javax.swing.JTextField headmasterTrainerTabExUNField;
    private javax.swing.JLabel headmasterTrainerTabExUNLabel;
    private javax.swing.JButton headmasterTrainerTabExUpdate;
    private javax.swing.JPanel headmasterTrainerTabNew;
    private javax.swing.JTextField headmasterTrainerTabNewFNField;
    private javax.swing.JLabel headmasterTrainerTabNewFNLabel;
    private javax.swing.JTextField headmasterTrainerTabNewLNField;
    private javax.swing.JLabel headmasterTrainerTabNewLNLabel;
    private javax.swing.JLabel headmasterTrainerTabNewLabel;
    private javax.swing.JPasswordField headmasterTrainerTabNewPWField;
    private javax.swing.JLabel headmasterTrainerTabNewPWLabel;
    private javax.swing.JButton headmasterTrainerTabNewSubmit;
    private javax.swing.JTextField headmasterTrainerTabNewUNField;
    private javax.swing.JLabel headmasterTrainerTabNewUNLabel;
    private javax.swing.JLabel headmasterTrainerTabScrollNRLabel;
    private javax.swing.JScrollPane headmasterTrainerTabScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    // End of variables declaration//GEN-END:variables
}
