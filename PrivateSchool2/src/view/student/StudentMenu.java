/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.student;

import com.github.lgooddatepicker.components.CalendarPanel;
import controller.DBAccess;
import dao.CourseDao;
import dao.DaoUtils;
import dao.ScheduleDao;
import dao.StudentAssignmentDao;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import model.Course;
import model.Schedule;
import model.StudentAssignment;
import view.UserMenu;

/**
 *
 * @author Sakel
 */
public class StudentMenu extends javax.swing.JPanel implements UserMenu {
    
    /**
     * DAOs
     */
    private CourseDao cd = null;
    private ScheduleDao scd = null;
    private StudentAssignmentDao sad = null;
    
    /**
     * all the Courses of the logged in student
     */
    private LinkedHashMap<Integer, model.Course> allStudentCourses;
    
    /**
     * all the Courses
     */
    private LinkedHashMap<Integer, model.Course> allCourses;
    
    /**
     * all the Assignments of the logged in student
     */
    private ArrayList<model.StudentAssignment> allStudentAssignments;
    private LinkedHashSet<Integer> allStudentCoursesWithAssignments;
    
    /**
     * all the Schedules of the logged in student
     */
    private ArrayList<model.Schedule> allStudentSchedules;
    
    private Actions myActions;
    

    /**
     * Creates new form StudentMenu
     */
    public StudentMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        studentTabs = new javax.swing.JTabbedPane();
        studentMyCoursesTab = new javax.swing.JPanel();
        studentMyCoursesControlsPanel = new javax.swing.JPanel();
        studentMyCoursesCalendarPanel = new com.github.lgooddatepicker.components.CalendarPanel();
        studentMyCoursesCourseFilter = new javax.swing.JComboBox<>();
        studentMyCoursesResultsScrollPane = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        studentMyAssignmentsTab = new javax.swing.JPanel();
        studentMyAssignmentsCourseFilter = new javax.swing.JComboBox<>();
        studentMyAssignmentsScrollPane = new javax.swing.JScrollPane();
        studentMyAssignmentsSubmitPanel = new javax.swing.JPanel();
        studentMyAssignmentsSubmitPanelLabel = new javax.swing.JLabel();
        studentMyAssignmentsSubmitPanelInner = new javax.swing.JPanel();
        studentAvailableCoursesTab = new javax.swing.JPanel();
        studentAVCoursesScrollPane = new javax.swing.JScrollPane();
        studentAVCoursesScrollNRLabel = new javax.swing.JLabel();
        studentAVCoursesJoinPanel = new javax.swing.JPanel();
        studentAVCoursesJoinPanelLabel = new javax.swing.JLabel();
        studentAVCoursesJoinPanelInner = new javax.swing.JPanel();

        studentMyCoursesCourseFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "You have no courses yet" }));
        studentMyCoursesCourseFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentMyCoursesCourseFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentMyCoursesControlsPanelLayout = new javax.swing.GroupLayout(studentMyCoursesControlsPanel);
        studentMyCoursesControlsPanel.setLayout(studentMyCoursesControlsPanelLayout);
        studentMyCoursesControlsPanelLayout.setHorizontalGroup(
            studentMyCoursesControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentMyCoursesControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentMyCoursesControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(studentMyCoursesCalendarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentMyCoursesCourseFilter, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        studentMyCoursesControlsPanelLayout.setVerticalGroup(
            studentMyCoursesControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentMyCoursesControlsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentMyCoursesCalendarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(studentMyCoursesCourseFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(387, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Choose a highlighted day to see its schedule");
        studentMyCoursesResultsScrollPane.setViewportView(jLabel1);

        javax.swing.GroupLayout studentMyCoursesTabLayout = new javax.swing.GroupLayout(studentMyCoursesTab);
        studentMyCoursesTab.setLayout(studentMyCoursesTabLayout);
        studentMyCoursesTabLayout.setHorizontalGroup(
            studentMyCoursesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentMyCoursesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentMyCoursesControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(studentMyCoursesResultsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                .addContainerGap())
        );
        studentMyCoursesTabLayout.setVerticalGroup(
            studentMyCoursesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentMyCoursesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentMyCoursesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentMyCoursesResultsScrollPane)
                    .addComponent(studentMyCoursesControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        studentTabs.addTab("My Courses", null, studentMyCoursesTab, "<html>Schedule of today with course title (per hour), and with date changer<br>List of courses that, if chosen, lead to month view schedule of the specific course</html>");

        studentMyAssignmentsCourseFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "You have no courses yet" }));
        studentMyAssignmentsCourseFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentMyAssignmentsCourseFilterActionPerformed(evt);
            }
        });

        studentMyAssignmentsSubmitPanelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        studentMyAssignmentsSubmitPanelInner.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout studentMyAssignmentsSubmitPanelLayout = new javax.swing.GroupLayout(studentMyAssignmentsSubmitPanel);
        studentMyAssignmentsSubmitPanel.setLayout(studentMyAssignmentsSubmitPanelLayout);
        studentMyAssignmentsSubmitPanelLayout.setHorizontalGroup(
            studentMyAssignmentsSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentMyAssignmentsSubmitPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(studentMyAssignmentsSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(studentMyAssignmentsSubmitPanelInner, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentMyAssignmentsSubmitPanelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(239, 239, 239))
        );
        studentMyAssignmentsSubmitPanelLayout.setVerticalGroup(
            studentMyAssignmentsSubmitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentMyAssignmentsSubmitPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentMyAssignmentsSubmitPanelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentMyAssignmentsSubmitPanelInner, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout studentMyAssignmentsTabLayout = new javax.swing.GroupLayout(studentMyAssignmentsTab);
        studentMyAssignmentsTab.setLayout(studentMyAssignmentsTabLayout);
        studentMyAssignmentsTabLayout.setHorizontalGroup(
            studentMyAssignmentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentMyAssignmentsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentMyAssignmentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(studentMyAssignmentsSubmitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentMyAssignmentsScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, studentMyAssignmentsTabLayout.createSequentialGroup()
                        .addComponent(studentMyAssignmentsCourseFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 723, Short.MAX_VALUE)))
                .addContainerGap())
        );
        studentMyAssignmentsTabLayout.setVerticalGroup(
            studentMyAssignmentsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentMyAssignmentsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentMyAssignmentsCourseFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(studentMyAssignmentsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(studentMyAssignmentsSubmitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        studentTabs.addTab("My Assignments", null, studentMyAssignmentsTab, "<html>List of all assignments with course dropdown filter, indication of submission status and date, and button for each to allow for submission</html>");

        studentAVCoursesScrollNRLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        studentAVCoursesScrollNRLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        studentAVCoursesScrollNRLabel.setText("There are no courses yet to join");
        studentAVCoursesScrollPane.setViewportView(studentAVCoursesScrollNRLabel);

        studentAVCoursesJoinPanelLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        studentAVCoursesJoinPanelInner.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout studentAVCoursesJoinPanelLayout = new javax.swing.GroupLayout(studentAVCoursesJoinPanel);
        studentAVCoursesJoinPanel.setLayout(studentAVCoursesJoinPanelLayout);
        studentAVCoursesJoinPanelLayout.setHorizontalGroup(
            studentAVCoursesJoinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentAVCoursesJoinPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(studentAVCoursesJoinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(studentAVCoursesJoinPanelInner, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentAVCoursesJoinPanelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(239, 239, 239))
        );
        studentAVCoursesJoinPanelLayout.setVerticalGroup(
            studentAVCoursesJoinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentAVCoursesJoinPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentAVCoursesJoinPanelLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentAVCoursesJoinPanelInner, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout studentAvailableCoursesTabLayout = new javax.swing.GroupLayout(studentAvailableCoursesTab);
        studentAvailableCoursesTab.setLayout(studentAvailableCoursesTabLayout);
        studentAvailableCoursesTabLayout.setHorizontalGroup(
            studentAvailableCoursesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentAvailableCoursesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentAvailableCoursesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentAVCoursesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1102, Short.MAX_VALUE)
                    .addComponent(studentAVCoursesJoinPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        studentAvailableCoursesTabLayout.setVerticalGroup(
            studentAvailableCoursesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentAvailableCoursesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentAVCoursesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(studentAVCoursesJoinPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        studentTabs.addTab("Available Courses", null, studentAvailableCoursesTab, "<html>List of all courses NOT yet taken, with trainer info, and button for each to allow student to enroll</html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentTabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(studentTabs, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Course filter event handling for student's assignments
     * 
     * @param evt 
     */
    private void studentMyAssignmentsCourseFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentMyAssignmentsCourseFilterActionPerformed
        
        studentMyAssignmentsSubmitPanelInner.setVisible(false);
        studentMyAssignmentsSubmitPanelInner.revalidate();
        studentMyAssignmentsSubmitPanelLabel.setText("");

        ResultSet rs = null;
        allStudentAssignments = new ArrayList();

        try {

            if (studentMyAssignmentsCourseFilter.getSelectedIndex() > 0){
                Object[] arr = allStudentCoursesWithAssignments.toArray();
                rs = sad.getAllPerStudentPerCourse(DBAccess.singleton().getUser().getId(), (int) arr[studentMyAssignmentsCourseFilter.getSelectedIndex() - 1]);
            }
            else {
                rs = sad.getAllPerStudent(DBAccess.singleton().getUser().getId());
            }
            
            allStudentAssignments = new DaoUtils().studentAssignmentify(rs);
            
        } catch (SQLException ex) {
            Logger.getLogger(StudentMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(StudentMenu.class.getName()).log(Level.SEVERE, null, ex);
        }

        if ( myActions != null ) myActions.populateMyAssignmentsTable();

    }//GEN-LAST:event_studentMyAssignmentsCourseFilterActionPerformed

    /**
     * Course filter event handling for student's schedule
     * 
     * @param evt 
     */
    private void studentMyCoursesCourseFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentMyCoursesCourseFilterActionPerformed
        
        if ( myActions != null ) {
        
            studentMyCoursesResultsScrollPane.setViewportView(view.Actions.getNewLabel("Choose a highlighted day to see its schedule"));
            
            ResultSet rs = null;
            allStudentSchedules = new ArrayList();
            
            try{
                
                if ( studentMyCoursesCourseFilter.getSelectedIndex() > 0 ) {
                    Object[] arr = allStudentCourses.keySet().toArray();
                    rs = scd.getAllPerStudentPerCourse(DBAccess.singleton().getUser().getId(), (int) arr[studentMyCoursesCourseFilter.getSelectedIndex() - 1]);
                }
                else {
                    rs = scd.getAllPerStudent(DBAccess.singleton().getUser().getId());
                }
                
                allStudentSchedules = new DaoUtils().schedulify(rs);
                
            } catch (SQLException ex) {
                Logger.getLogger(StudentMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(StudentMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            myActions.initializeCalendar();
        
        }
        
    }//GEN-LAST:event_studentMyCoursesCourseFilterActionPerformed

    @Override
    public void initUserMenu(){
    
        ResultSet rs = null;
        cd = new CourseDao();
        scd = new ScheduleDao();
        sad = new StudentAssignmentDao();
        
        allCourses = new LinkedHashMap();
        allStudentCourses = new LinkedHashMap();
        allStudentAssignments = new ArrayList();
        allStudentSchedules = new ArrayList();
        
        try {
            
            rs = cd.getAll();
            allCourses = new DaoUtils().coursify(rs);
            
            rs = cd.getAllPerStudent(DBAccess.singleton().getUser().getId());
            allStudentCourses = new DaoUtils().coursify(rs);
            
            rs = sad.getAllPerStudent(DBAccess.singleton().getUser().getId());
            allStudentAssignments = new DaoUtils().studentAssignmentify(rs);
            
            rs = scd.getAllPerStudent(DBAccess.singleton().getUser().getId());
            allStudentSchedules = new DaoUtils().schedulify(rs);
            
            
        } catch (SQLException ex) {
            Logger.getLogger(StudentMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(StudentMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        myActions = new Actions(this);
        
        try {
            new DaoUtils().close(rs, cd.getSTMT(), cd.getPRESTMT(), sad.getSTMT(), sad.getPRESTMT(), scd.getSTMT(), scd.getPRESTMT());
        } catch (Exception ex) {
            Logger.getLogger(StudentMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }

    public CourseDao getCd() {
        return cd;
    }

    public ScheduleDao getScd() {
        return scd;
    }

    public StudentAssignmentDao getSad() {
        return sad;
    }

    public LinkedHashMap<Integer, Course> getAllStudentCourses() {
        return allStudentCourses;
    }

    public LinkedHashMap<Integer, Course> getAllCourses() {
        return allCourses;
    }

    public ArrayList<StudentAssignment> getAllStudentAssignments() {
        return allStudentAssignments;
    }

    public ArrayList<Schedule> getAllStudentSchedules() {
        return allStudentSchedules;
    }

    public JPanel getStudentAVCoursesJoinPanel() {
        return studentAVCoursesJoinPanel;
    }

    public JLabel getStudentAVCoursesScrollNRLabel() {
        return studentAVCoursesScrollNRLabel;
    }

    public JScrollPane getStudentAVCoursesScrollPane() {
        return studentAVCoursesScrollPane;
    }

    public JComboBox<String> getStudentMyAssignmentsCourseFilter() {
        return studentMyAssignmentsCourseFilter;
    }

    public JScrollPane getStudentMyAssignmentsScrollPane() {
        return studentMyAssignmentsScrollPane;
    }

    public JPanel getStudentMyAssignmentsSubmitPanel() {
        return studentMyAssignmentsSubmitPanel;
    }

    public JPanel getStudentAvailableCoursesTab() {
        return studentAvailableCoursesTab;
    }

    public JPanel getStudentMyAssignmentsTab() {
        return studentMyAssignmentsTab;
    }

    public JPanel getStudentMyCoursesTab() {
        return studentMyCoursesTab;
    }

    public JTabbedPane getStudentTabs() {
        return studentTabs;
    }

    public JPanel getStudentAVCoursesJoinPanelInner() {
        return studentAVCoursesJoinPanelInner;
    }

    public JLabel getStudentAVCoursesJoinPanelLabel() {
        return studentAVCoursesJoinPanelLabel;
    }

    public JPanel getStudentMyAssignmentsSubmitPanelInner() {
        return studentMyAssignmentsSubmitPanelInner;
    }

    public JLabel getStudentMyAssignmentsSubmitPanelLabel() {
        return studentMyAssignmentsSubmitPanelLabel;
    }

    public LinkedHashSet<Integer> getAllStudentCoursesWithAssignments() {
        return allStudentCoursesWithAssignments;
    }

    public void setAllStudentCoursesWithAssignments(LinkedHashSet<Integer> allStudentCoursesWithAssignments) {
        this.allStudentCoursesWithAssignments = allStudentCoursesWithAssignments;
    }

    public CalendarPanel getStudentMyCoursesCalendarPanel() {
        return studentMyCoursesCalendarPanel;
    }

    public JPanel getStudentMyCoursesControlsPanel() {
        return studentMyCoursesControlsPanel;
    }

    public JComboBox<String> getStudentMyCoursesCourseFilter() {
        return studentMyCoursesCourseFilter;
    }

    public JScrollPane getStudentMyCoursesResultsScrollPane() {
        return studentMyCoursesResultsScrollPane;
    }
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel studentAVCoursesJoinPanel;
    private javax.swing.JPanel studentAVCoursesJoinPanelInner;
    private javax.swing.JLabel studentAVCoursesJoinPanelLabel;
    private javax.swing.JLabel studentAVCoursesScrollNRLabel;
    private javax.swing.JScrollPane studentAVCoursesScrollPane;
    private javax.swing.JPanel studentAvailableCoursesTab;
    private javax.swing.JComboBox<String> studentMyAssignmentsCourseFilter;
    private javax.swing.JScrollPane studentMyAssignmentsScrollPane;
    private javax.swing.JPanel studentMyAssignmentsSubmitPanel;
    private javax.swing.JPanel studentMyAssignmentsSubmitPanelInner;
    private javax.swing.JLabel studentMyAssignmentsSubmitPanelLabel;
    private javax.swing.JPanel studentMyAssignmentsTab;
    private com.github.lgooddatepicker.components.CalendarPanel studentMyCoursesCalendarPanel;
    private javax.swing.JPanel studentMyCoursesControlsPanel;
    private javax.swing.JComboBox<String> studentMyCoursesCourseFilter;
    private javax.swing.JScrollPane studentMyCoursesResultsScrollPane;
    private javax.swing.JPanel studentMyCoursesTab;
    private javax.swing.JTabbedPane studentTabs;
    // End of variables declaration//GEN-END:variables
}
