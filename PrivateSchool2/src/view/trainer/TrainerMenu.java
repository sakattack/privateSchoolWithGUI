/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.trainer;

import controller.DBAccess;
import dao.*;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import view.UserMenu;
import view.headmaster.HeadmasterMenu;

/**
 *
 * @author Sakel
 */
public class TrainerMenu extends javax.swing.JPanel implements UserMenu {
    
    /**
     * DAOs
     */
    private CourseDao cd = null;
    private StudentDao sd = null;
    private StudentAssignmentDao sad = null;
    
    /**
     * all the Courses of the logged in trainer
     */
    private LinkedHashMap<Integer, model.Course> allTrainerCourses;
    
    /**
     * all the students of the selected course
     */
    private LinkedHashMap<String, model.Student> allCourseStudents;
    
    /**
     * all the assignments of the selected student
     */
    private ArrayList<model.StudentAssignment> allStudentAssignments;
    
    /**
     * Table that will hold all the students of a course as rows
     */
    private JTable trainerStudentsScrollTable;
    private DefaultTableModel trainerStudentsScrollTableModel;
    private JScrollBar trainerStudentsScrollTableBarV;
    
    /**
     * Table that will hold all the assignments of a student as rows
     */
    private JTable trainerAssignmentsScrollTable;
    private DefaultTableModel trainerAssignmentsScrollTableModel;
    private JScrollBar trainerAssignmentsScrollTableBarV;
    

    /**
     * Creates new form TrainerMenu
     */
    public TrainerMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trainerCourseFilter = new javax.swing.JComboBox<>();
        trainerStudentsScrollPane = new javax.swing.JScrollPane();
        trainerAssignmentsScrollPane = new javax.swing.JScrollPane();
        trainerAssignmentEditScrollPane = new javax.swing.JScrollPane();

        trainerCourseFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "You have no courses yet" }));
        trainerCourseFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainerCourseFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trainerStudentsScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(trainerCourseFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(trainerAssignmentsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(trainerAssignmentEditScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trainerCourseFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainerStudentsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trainerAssignmentEditScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(trainerAssignmentsScrollPane))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Select a course event handling
     * @param evt 
     */
    private void trainerCourseFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainerCourseFilterActionPerformed
        
        
        if (trainerCourseFilter.getSelectedIndex() > 0) {
            
            ResultSet rs = null;
            allCourseStudents = new LinkedHashMap();
            Object[] courseIDs = allTrainerCourses.keySet().toArray();
            int courseID = (int) courseIDs[trainerCourseFilter.getSelectedIndex() - 1];

            try {
                rs = sd.getAllPerCourse(courseID);
                allCourseStudents = new DaoUtils().studentify(rs);
            } catch (SQLException ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            }

            if ( !allCourseStudents.isEmpty() ) {

                //prepare the table with the courses
                DefaultTableCellRenderer centerRendererStudents = new DefaultTableCellRenderer();
                centerRendererStudents.setHorizontalAlignment( JLabel.CENTER );
                int rows = allCourseStudents.entrySet().size();
                String[] header = {"ID", "First Name", "Last Name", "Username", "Pending", "Overdue", "Not Yet Marked"};
                trainerStudentsScrollTableModel = new DefaultTableModel(null, header)
                {
                    @Override
                    public Class<?> getColumnClass(int col) {
                        return getValueAt(0, col).getClass();
                    }
                };

                trainerStudentsScrollTable = new JTable(trainerStudentsScrollTableModel){

                    @Override
                    public boolean isCellEditable(int row, int column){
                        return false;
                    }
                };

                trainerStudentsScrollTable.setRowHeight(40);

                trainerStudentsScrollTable.getColumn("ID").setMaxWidth(50);
                trainerStudentsScrollTable.getColumn("ID").setMinWidth(50);
                trainerStudentsScrollTable.getColumn("ID").setCellRenderer(centerRendererStudents );

                trainerStudentsScrollTable.getColumn("First Name").setMinWidth(100);
                trainerStudentsScrollTable.getColumn("Last Name").setMinWidth(100);
                trainerStudentsScrollTable.getColumn("Username").setMinWidth(100);

                trainerStudentsScrollTable.getColumn("Pending").setMaxWidth(60);
                trainerStudentsScrollTable.getColumn("Pending").setMinWidth(60);

                trainerStudentsScrollTable.getColumn("Overdue").setMaxWidth(60);
                trainerStudentsScrollTable.getColumn("Overdue").setMinWidth(60);

                trainerStudentsScrollTable.getColumn("Not Yet Marked").setMaxWidth(100);
                trainerStudentsScrollTable.getColumn("Not Yet Marked").setMinWidth(100);

                //set scroll
                Dimension d = new Dimension(320, rows * trainerStudentsScrollTable.getRowHeight());
                trainerStudentsScrollTable.setPreferredScrollableViewportSize(d);

                //initialize assignments scroll pane
                trainerAssignmentsScrollPane.setViewportView(view.Actions.getNewLabel("Select a student for his/her assignments for this course to appear here"));
                trainerAssignmentEditScrollPane.setViewportView(new javax.swing.JLabel(""));

                // add rows
                allCourseStudents.entrySet().forEach((me) -> {

                    trainerStudentsScrollTableModel.addRow(new Object[]{

                        // TODO : add assignments pending, overdue and not yet marked
                        me.getValue().getId(), me.getValue().getFirstName(), me.getValue().getLastName(), me.getKey(), 0, 0, 0

                    });
                });

                //when user selects a row then the selected student's assignments are loaded to the assignments scroll table for further selection by the user
                trainerStudentsScrollTable.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {

                    if (!event.getValueIsAdjusting() && trainerStudentsScrollTable.getSelectedRow() >= 0) {

                        //get selected student
                        model.Student selectedStudent = allCourseStudents.get(
                                trainerStudentsScrollTable.getValueAt(
                                        trainerStudentsScrollTable.getSelectedRow(), 3
                                ).toString()
                        );
                        
                        ResultSet rs2 = null;
                        allStudentAssignments = new ArrayList();
                        
                        try {
                            rs2 = sad.getAllPerStudentPerCourse(selectedStudent.getId(), courseID);
                            allStudentAssignments = new DaoUtils().studentAssignmentify(rs2);
                        } catch (SQLException ex) {
                            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (NullPointerException ex) {
                            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (Exception ex) {
                            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        if ( !allStudentAssignments.isEmpty() ) {
                        
                            //prepare the table with the courses
                            DefaultTableCellRenderer centerRendererAssignments = new DefaultTableCellRenderer();
                            centerRendererAssignments.setHorizontalAlignment( JLabel.CENTER );
                            int rows2 = allStudentAssignments.size();
                            String[] header2 = {"Title", "Deadline", "Description", "Course ID & Title", "Submitted","Oral Points","Writing Points"};
                            trainerAssignmentsScrollTableModel = new DefaultTableModel(null, header2)
                            {
                                @Override
                                public Class<?> getColumnClass(int col) {
                                    return getValueAt(0, col).getClass();
                                }
                            };
                            trainerAssignmentsScrollTable = new JTable(trainerAssignmentsScrollTableModel)
                            {

                                @Override
                                public boolean isCellEditable(int row, int column){
                                    return false;
                                }
                            };
                            trainerAssignmentsScrollTable.setRowHeight(40);
                            
                            trainerAssignmentsScrollTable.getColumn("Title").setMaxWidth(200);
                            trainerAssignmentsScrollTable.getColumn("Title").setMinWidth(100);
                            
                            trainerAssignmentsScrollTable.getColumn("Deadline").setMaxWidth(100);
                            trainerAssignmentsScrollTable.getColumn("Deadline").setMinWidth(100);
                            
                            trainerAssignmentsScrollTable.getColumn("Description").setMaxWidth(300);
                            trainerAssignmentsScrollTable.getColumn("Description").setMinWidth(100);
                            
                            trainerAssignmentsScrollTable.getColumn("Course ID & Title").setMaxWidth(200);
                            trainerAssignmentsScrollTable.getColumn("Course ID & Title").setMinWidth(100);
                            
                            trainerAssignmentsScrollTable.getColumn("Submitted").setMaxWidth(70);
                            trainerAssignmentsScrollTable.getColumn("Submitted").setMinWidth(70);
                            
                            trainerAssignmentsScrollTable.getColumn("Oral Points").setMaxWidth(70);
                            trainerAssignmentsScrollTable.getColumn("Oral Points").setMinWidth(70);
                            trainerAssignmentsScrollTable.getColumn("Oral Points").setCellRenderer(centerRendererAssignments );
                            
                            trainerAssignmentsScrollTable.getColumn("Writing Points").setMaxWidth(100);
                            trainerAssignmentsScrollTable.getColumn("Writing Points").setMinWidth(100);
                            trainerAssignmentsScrollTable.getColumn("Writing Points").setCellRenderer(centerRendererAssignments );
                            
                            //set scroll
                            Dimension d2 = new Dimension(320, rows * trainerAssignmentsScrollTable.getRowHeight());
                            trainerAssignmentsScrollTable.setPreferredScrollableViewportSize(d2);
                            
                            // add rows
                            allStudentAssignments.forEach((me) -> {
                            
                                LocalDateTime submitted = me.getSubmittedDate();
                                String submittedString = ( submitted.getYear() == 1970 ) ? "" : submitted.toString();
                                
                                trainerAssignmentsScrollTableModel.addRow(new Object[]{

                                    me.getTitle(), 
                                    me.getSubmissionDate(), 
                                    me.getDescription(), 
                                    me.getCourseId() + " " + allTrainerCourses.get(me.getCourseId()).getTitle(), 
                                    submittedString, 
                                    me.getOralPoints(), 
                                    me.getWritingPoints()

                                });
                            
                            });
                            
                            trainerAssignmentEditScrollPane.setViewportView(view.Actions.getNewLabel("Select a submitted assignment to allow marking"));
                            
                            //when user selects a row then the selected assignment's details are loaded to the edit fields
                            trainerAssignmentsScrollTable.getSelectionModel().addListSelectionListener((ListSelectionEvent ev) -> {
                                if (!ev.getValueIsAdjusting()) {
                                    if ( !trainerAssignmentsScrollTable.getValueAt(trainerAssignmentsScrollTable.getSelectedRow(), 4).toString().equals("") ) {
                                        new Actions(
                                                this, 
                                                allStudentAssignments.get(trainerAssignmentsScrollTable.getSelectedRow()), 
                                                sad
                                        );
                                    }
                                    else {
                                        trainerAssignmentEditScrollPane.setViewportView(view.Actions.getNewLabel("Select a submitted assignment to allow marking"));
                                    }
                                }
                            });
                            
                            //add table to scroll pane
                            trainerAssignmentsScrollPane.setViewportView(trainerAssignmentsScrollTable);
                        
                        }
                        else {
                        
                            trainerAssignmentsScrollPane.setViewportView(view.Actions.getNewLabel("This student has no assignments yet for this course"));
                            trainerAssignmentEditScrollPane.setViewportView(new javax.swing.JLabel(""));
                        
                        }
                        
                        try {
                            new DaoUtils().close(rs2, sad.getSTMT(), sad.getPRESTMT());
                        } catch (Exception ex) {
                            Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        trainerAssignmentsScrollPane.revalidate();
                        trainerAssignmentsScrollPane.repaint();

                    }

                });
                
                //add students table to scroll pane
                trainerStudentsScrollPane.setViewportView(trainerStudentsScrollTable);
                

            }
            else {
            
                trainerStudentsScrollPane.setViewportView(view.Actions.getNewLabel("This course has no students yet"));
                trainerAssignmentsScrollPane.setViewportView(new javax.swing.JLabel(""));
                trainerAssignmentEditScrollPane.setViewportView(new javax.swing.JLabel(""));
            
            }

            try {
                new DaoUtils().close(rs, sd.getSTMT(), sd.getPRESTMT());
            } catch (Exception ex) {
                Logger.getLogger(HeadmasterMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
        else {
        
            trainerStudentsScrollPane.setViewportView(view.Actions.getNewLabel("Select a course for its students to appear here"));
            trainerAssignmentsScrollPane.setViewportView(new javax.swing.JLabel(""));
            trainerAssignmentEditScrollPane.setViewportView(new javax.swing.JLabel(""));
        
        }
        
    }//GEN-LAST:event_trainerCourseFilterActionPerformed

    /**
     * Initializes a menu for a connected user of type trainer.
     */
    @Override
    public void initUserMenu(){
    
        ResultSet rs = null;
        cd = new CourseDao();
        sd = new StudentDao();
        sad = new StudentAssignmentDao();
        
        //all the courses of this connected trainer user
        allTrainerCourses = new LinkedHashMap();
        
        try {
            rs = cd.getAllPerTrainer(DBAccess.singleton().getUser().getId());
            allTrainerCourses = new DaoUtils().coursify(rs);
        } catch (SQLException ex) {
            Logger.getLogger(TrainerMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(TrainerMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if ( !allTrainerCourses.isEmpty() ) {
            
            //add courses in the dropdown selection filter
            trainerCourseFilter.removeAllItems();
            trainerCourseFilter.addItem("Select one of your courses");
            allTrainerCourses.entrySet().forEach((me) -> {
            
                trainerCourseFilter.addItem(me.getKey() + " | " + me.getValue().getType() + " | " + me.getValue().getStream() + " | " + me.getValue().getTitle());
            
            });
        }
        
        try {
            new DaoUtils().close(rs, cd.getSTMT(), cd.getPRESTMT());
        } catch (Exception ex) {
            Logger.getLogger(TrainerMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }

    public JTable getTrainerStudentsScrollTable() {
        return trainerStudentsScrollTable;
    }

    public JScrollPane getTrainerAssignmentEditScrollPane() {
        return trainerAssignmentEditScrollPane;
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane trainerAssignmentEditScrollPane;
    private javax.swing.JScrollPane trainerAssignmentsScrollPane;
    private javax.swing.JComboBox<String> trainerCourseFilter;
    private javax.swing.JScrollPane trainerStudentsScrollPane;
    // End of variables declaration//GEN-END:variables
}
